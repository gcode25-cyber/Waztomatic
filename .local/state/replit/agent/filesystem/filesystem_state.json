{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Waziper - WhatsApp Marketing Automation Platform\n\n## Overview\n\nWaziper is a comprehensive WhatsApp marketing automation platform built with Node.js/Express and React. It enables businesses to manage bulk messaging campaigns, automated responses, contact management, and WhatsApp session handling through an intuitive web interface. The platform supports advanced features like spintax message variations, scheduled campaigns, chatbots, and detailed analytics.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes (August 13, 2025)\n\n✓ **QR Code Display Issue Fixed**: Resolved WhatsApp QR code generation and display problems\n  - Fixed Baileys library import issues using ES module compatibility with createRequire\n  - Converted raw QR code strings to proper data URL format (`data:image/png;base64,`)\n  - Enhanced QR code modal with better error handling for failed sessions\n  - QR codes now display correctly as scannable images in the frontend\n  \n✓ **UI Improvements**: Fixed various console warnings and accessibility issues\n  - Removed duplicate close buttons from dialog components\n  - Added proper dialog descriptions for screen readers\n  - Fixed nested anchor tag warnings in sidebar navigation\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: shadcn/ui component library built on Radix UI primitives for accessible, customizable components\n- **Styling**: Tailwind CSS with custom design tokens and WhatsApp-themed color variables\n- **Build Tool**: Vite for fast development and optimized production builds\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules for modern JavaScript features\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **WebSockets**: Built-in WebSocket server for real-time updates (session status, campaign progress)\n- **File Upload**: Multer middleware for handling CSV imports and media uploads\n- **Session Management**: PostgreSQL sessions with connect-pg-simple\n- **Error Handling**: Centralized error handling with @hapi/boom for consistent API responses\n\n### Data Storage Architecture\n- **Database**: PostgreSQL as primary database with Neon serverless hosting\n- **ORM**: Drizzle ORM with schema-first approach for type safety\n- **Schema Design**: \n  - Users table for authentication\n  - Contacts with group-based segmentation\n  - WhatsApp sessions for multi-account management\n  - Campaigns with scheduling and analytics\n  - Auto-reply rules with keyword triggers\n  - Message queue for rate-limited sending\n- **File Storage**: Local filesystem for uploads with configurable storage options\n\n### WhatsApp Integration\n- **Library**: @whiskeysockets/baileys for WhatsApp Web API integration\n- **Authentication**: Multi-file auth state persistence for session management\n- **QR Code**: Dynamic QR code generation for session setup\n- **Multi-Session**: Support for multiple WhatsApp accounts with individual session management\n- **Message Types**: Support for text, images, videos, documents, and audio files\n\n### Key Services\n- **WhatsApp Service**: Manages connections, message sending, and session lifecycle\n- **Scheduler Service**: Handles campaign scheduling with cron-based execution and rate limiting\n- **Spintax Service**: Processes message variations to avoid spam detection\n- **Message Queue**: Rate-limited message processing to respect WhatsApp limits\n\n### Security & Performance\n- **Rate Limiting**: Configurable message rate limits (default 30 messages/minute)\n- **Session Security**: Secure session storage with configurable timeouts\n- **Input Validation**: Zod schemas for API request/response validation\n- **Error Boundaries**: Comprehensive error handling on both client and server\n- **Real-time Updates**: WebSocket integration for live status updates\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: Neon PostgreSQL serverless database\n- **Authentication**: Custom session-based authentication with PostgreSQL storage\n\n### WhatsApp Integration\n- **@whiskeysockets/baileys**: WhatsApp Web API client for message sending and session management\n- **qrcode**: QR code generation for WhatsApp session authentication\n\n### Development Tools\n- **Drizzle Kit**: Database migration and schema management\n- **TypeScript**: Type checking and development tooling\n- **ESBuild**: Production build bundling for server code\n- **Vite**: Frontend development server and build tool\n\n### File Processing\n- **csv-parser**: CSV file parsing for contact imports\n- **multer**: File upload handling middleware\n\n### Utility Libraries\n- **date-fns**: Date manipulation and formatting\n- **node-cron**: Scheduled task execution for campaigns\n- **nanoid**: Secure unique ID generation","size_bytes":5113},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        whatsapp: {\n          50: \"var(--whatsapp-50)\",\n          100: \"var(--whatsapp-100)\",\n          500: \"var(--whatsapp-500)\",\n          600: \"var(--whatsapp-600)\",\n          700: \"var(--whatsapp-700)\",\n        },\n        blue: {\n          50: \"var(--blue-50)\",\n          100: \"var(--blue-100)\",\n          600: \"var(--blue-600)\",\n          700: \"var(--blue-700)\",\n        },\n        purple: {\n          50: \"var(--purple-50)\",\n          100: \"var(--purple-100)\",\n          600: \"var(--purple-600)\",\n          700: \"var(--purple-700)\",\n        },\n        orange: {\n          50: \"var(--orange-50)\",\n          100: \"var(--orange-100)\",\n          600: \"var(--orange-600)\",\n          700: \"var(--orange-700)\",\n        },\n        gray: {\n          50: \"var(--gray-50)\",\n          100: \"var(--gray-100)\",\n          200: \"var(--gray-200)\",\n          300: \"var(--gray-300)\",\n          400: \"var(--gray-400)\",\n          500: \"var(--gray-500)\",\n          600: \"var(--gray-600)\",\n          700: \"var(--gray-700)\",\n          800: \"var(--gray-800)\",\n          900: \"var(--gray-900)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3853},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport csv from \"csv-parser\";\nimport { storage } from \"./storage\";\nimport { whatsappService } from \"./services/whatsapp\";\nimport { schedulerService } from \"./services/scheduler\";\nimport QRCode from 'qrcode';\nimport { parseSpintax, validateSpintax, countSpintaxVariations } from \"./services/spintax\";\nimport { \n  insertContactSchema, \n  insertSessionSchema, \n  insertCampaignSchema, \n  insertAutoReplyRuleSchema \n} from \"@shared/schema\";\n\n// Configure multer for file uploads\nconst upload = multer({\n  storage: multer.diskStorage({\n    destination: (req, file, cb) => {\n      const uploadDir = path.join(process.cwd(), 'uploads');\n      if (!fs.existsSync(uploadDir)) {\n        fs.mkdirSync(uploadDir, { recursive: true });\n      }\n      cb(null, uploadDir);\n    },\n    filename: (req, file, cb) => {\n      const uniqueName = `${Date.now()}-${Math.round(Math.random() * 1E9)}-${file.originalname}`;\n      cb(null, uniqueName);\n    }\n  }),\n  limits: {\n    fileSize: 16 * 1024 * 1024 // 16MB limit\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time updates\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  const clients = new Set<WebSocket>();\n\n  wss.on('connection', (ws) => {\n    clients.add(ws);\n    console.log('WebSocket client connected');\n\n    ws.on('close', () => {\n      clients.delete(ws);\n      console.log('WebSocket client disconnected');\n    });\n  });\n\n  // Broadcast function for real-time updates\n  function broadcast(data: any) {\n    const message = JSON.stringify(data);\n    clients.forEach(client => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(message);\n      }\n    });\n  }\n\n  // ========== CONTACTS API ==========\n  \n  app.get('/api/contacts', async (req, res) => {\n    try {\n      const contacts = await storage.getContacts();\n      res.json(contacts);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch contacts' });\n    }\n  });\n\n  app.post('/api/contacts', async (req, res) => {\n    try {\n      const validatedData = insertContactSchema.parse(req.body);\n      const contact = await storage.createContact(validatedData);\n      broadcast({ type: 'contact_created', data: contact });\n      res.json(contact);\n    } catch (error) {\n      res.status(400).json({ error: 'Invalid contact data' });\n    }\n  });\n\n  app.put('/api/contacts/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const contact = await storage.updateContact(id, req.body);\n      if (!contact) {\n        return res.status(404).json({ error: 'Contact not found' });\n      }\n      broadcast({ type: 'contact_updated', data: contact });\n      res.json(contact);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to update contact' });\n    }\n  });\n\n  app.delete('/api/contacts/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteContact(id);\n      if (!deleted) {\n        return res.status(404).json({ error: 'Contact not found' });\n      }\n      broadcast({ type: 'contact_deleted', data: { id } });\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to delete contact' });\n    }\n  });\n\n  // Import contacts from CSV\n  app.post('/api/contacts/import', upload.single('csv'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ error: 'No CSV file uploaded' });\n      }\n\n      const results: any[] = [];\n      const errors: string[] = [];\n\n      fs.createReadStream(req.file.path)\n        .pipe(csv())\n        .on('data', (data) => results.push(data))\n        .on('end', async () => {\n          let imported = 0;\n          \n          for (const row of results) {\n            try {\n              const contactData = {\n                name: row.name || row.Name || '',\n                phone: row.phone || row.Phone || '',\n                email: row.email || row.Email || '',\n                groups: row.groups ? row.groups.split(',').map((g: string) => g.trim()) : []\n              };\n\n              if (!contactData.name || !contactData.phone) {\n                errors.push(`Skipped row: missing name or phone - ${JSON.stringify(row)}`);\n                continue;\n              }\n\n              await storage.createContact(contactData);\n              imported++;\n            } catch (error) {\n              errors.push(`Error importing row: ${JSON.stringify(row)} - ${error}`);\n            }\n          }\n\n          // Clean up uploaded file\n          fs.unlinkSync(req.file!.path);\n\n          broadcast({ type: 'contacts_imported', data: { imported, errors: errors.length } });\n          res.json({ \n            imported, \n            errors: errors.length,\n            errorDetails: errors.slice(0, 10) // Return first 10 errors\n          });\n        });\n\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to import contacts' });\n    }\n  });\n\n  // Export contacts to CSV\n  app.get('/api/contacts/export', async (req, res) => {\n    try {\n      const contacts = await storage.getContacts();\n      \n      // Generate CSV content\n      const csvHeader = 'name,phone,email,groups\\n';\n      const csvContent = contacts.map(contact => \n        `\"${contact.name}\",\"${contact.phone}\",\"${contact.email || ''}\",\"${contact.groups?.join(',') || ''}\"`\n      ).join('\\n');\n\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=contacts.csv');\n      res.send(csvHeader + csvContent);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to export contacts' });\n    }\n  });\n\n  // ========== WHATSAPP SESSIONS API ==========\n\n  app.get('/api/sessions', async (req, res) => {\n    try {\n      const sessions = await storage.getSessions();\n      res.json(sessions);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch sessions' });\n    }\n  });\n\n  app.post('/api/sessions', async (req, res) => {\n    try {\n      const validatedData = insertSessionSchema.parse(req.body);\n      const session = await storage.createSession(validatedData);\n      \n      // Create WhatsApp connection\n      const { qrCode } = await whatsappService.createSession(session.sessionId);\n      \n      if (qrCode) {\n        await storage.updateSession(session.id, { qrCode, status: 'qr_pending' });\n      }\n\n      const updatedSession = await storage.getSession(session.id);\n      broadcast({ type: 'session_created', data: updatedSession });\n      res.json(updatedSession);\n    } catch (error) {\n      console.error('Error creating session:', error);\n      res.status(500).json({ error: 'Failed to create session' });\n    }\n  });\n\n  app.delete('/api/sessions/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const session = await storage.getSession(id);\n      \n      if (!session) {\n        return res.status(404).json({ error: 'Session not found' });\n      }\n\n      // Disconnect WhatsApp session\n      await whatsappService.disconnectSession(session.sessionId);\n      \n      // Delete from storage\n      await storage.deleteSession(id);\n      \n      broadcast({ type: 'session_deleted', data: { id } });\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to delete session' });\n    }\n  });\n\n  app.get('/api/sessions/:id/qr', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const session = await storage.getSession(id);\n      \n      if (!session) {\n        return res.status(404).json({ error: 'Session not found' });\n      }\n\n      let qrCode = session.qrCode;\n      \n      // If QR code exists and is not already a data URL, convert it\n      if (qrCode && !qrCode.startsWith('data:image/')) {\n        try {\n          qrCode = await QRCode.toDataURL(qrCode);\n          // Update the database with the converted QR code\n          await storage.updateSession(id, { qrCode });\n        } catch (error) {\n          console.error('Error converting QR code to data URL:', error);\n        }\n      }\n\n      res.json({ qrCode });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to get QR code' });\n    }\n  });\n\n  // ========== CAMPAIGNS API ==========\n\n  app.get('/api/campaigns', async (req, res) => {\n    try {\n      const campaigns = await storage.getCampaigns();\n      res.json(campaigns);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch campaigns' });\n    }\n  });\n\n  app.post('/api/campaigns', upload.single('media'), async (req, res) => {\n    try {\n      const campaignData = JSON.parse(req.body.data || '{}');\n      const validatedData = insertCampaignSchema.parse(campaignData);\n      \n      // Handle media upload\n      if (req.file) {\n        validatedData.mediaUrl = req.file.path;\n        validatedData.mediaType = req.file.mimetype.startsWith('image/') ? 'image' :\n                                  req.file.mimetype.startsWith('video/') ? 'video' :\n                                  req.file.mimetype.startsWith('audio/') ? 'audio' : 'document';\n      }\n\n      const campaign = await storage.createCampaign(validatedData);\n      \n      // Schedule or start campaign\n      if (campaign.scheduledAt) {\n        await schedulerService.scheduleCampaign(campaign);\n      } else {\n        // Start immediately\n        await schedulerService.scheduleCampaign(campaign);\n      }\n\n      broadcast({ type: 'campaign_created', data: campaign });\n      res.json(campaign);\n    } catch (error) {\n      console.error('Error creating campaign:', error);\n      res.status(400).json({ error: 'Invalid campaign data' });\n    }\n  });\n\n  app.put('/api/campaigns/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const campaign = await storage.updateCampaign(id, req.body);\n      if (!campaign) {\n        return res.status(404).json({ error: 'Campaign not found' });\n      }\n      broadcast({ type: 'campaign_updated', data: campaign });\n      res.json(campaign);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to update campaign' });\n    }\n  });\n\n  app.delete('/api/campaigns/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Cancel scheduled campaign\n      schedulerService.cancelScheduledCampaign(id);\n      \n      const deleted = await storage.deleteCampaign(id);\n      if (!deleted) {\n        return res.status(404).json({ error: 'Campaign not found' });\n      }\n      \n      broadcast({ type: 'campaign_deleted', data: { id } });\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to delete campaign' });\n    }\n  });\n\n  // Pause/Resume campaign\n  app.post('/api/campaigns/:id/pause', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const campaign = await storage.updateCampaign(id, { status: 'paused' });\n      if (!campaign) {\n        return res.status(404).json({ error: 'Campaign not found' });\n      }\n      broadcast({ type: 'campaign_paused', data: campaign });\n      res.json(campaign);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to pause campaign' });\n    }\n  });\n\n  // ========== AUTO-REPLY RULES API ==========\n\n  app.get('/api/auto-reply-rules', async (req, res) => {\n    try {\n      const { sessionId } = req.query;\n      const rules = await storage.getAutoReplyRules(sessionId as string);\n      res.json(rules);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch auto-reply rules' });\n    }\n  });\n\n  app.post('/api/auto-reply-rules', async (req, res) => {\n    try {\n      const validatedData = insertAutoReplyRuleSchema.parse(req.body);\n      const rule = await storage.createAutoReplyRule(validatedData);\n      broadcast({ type: 'auto_reply_rule_created', data: rule });\n      res.json(rule);\n    } catch (error) {\n      res.status(400).json({ error: 'Invalid auto-reply rule data' });\n    }\n  });\n\n  app.put('/api/auto-reply-rules/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const rule = await storage.updateAutoReplyRule(id, req.body);\n      if (!rule) {\n        return res.status(404).json({ error: 'Auto-reply rule not found' });\n      }\n      broadcast({ type: 'auto_reply_rule_updated', data: rule });\n      res.json(rule);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to update auto-reply rule' });\n    }\n  });\n\n  app.delete('/api/auto-reply-rules/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteAutoReplyRule(id);\n      if (!deleted) {\n        return res.status(404).json({ error: 'Auto-reply rule not found' });\n      }\n      broadcast({ type: 'auto_reply_rule_deleted', data: { id } });\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to delete auto-reply rule' });\n    }\n  });\n\n  // ========== SPINTAX API ==========\n\n  app.post('/api/spintax/validate', async (req, res) => {\n    try {\n      const { text } = req.body;\n      const validation = validateSpintax(text);\n      const variations = countSpintaxVariations(text);\n      res.json({ ...validation, variations });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to validate spintax' });\n    }\n  });\n\n  app.post('/api/spintax/preview', async (req, res) => {\n    try {\n      const { text } = req.body;\n      const examples = [];\n      \n      for (let i = 0; i < 5; i++) {\n        examples.push(parseSpintax(text));\n      }\n      \n      res.json({ examples });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to generate spintax preview' });\n    }\n  });\n\n  // ========== ANALYTICS API ==========\n\n  app.get('/api/analytics/dashboard', async (req, res) => {\n    try {\n      const { sessionId, startDate, endDate } = req.query;\n      \n      const start = startDate ? new Date(startDate as string) : undefined;\n      const end = endDate ? new Date(endDate as string) : undefined;\n      \n      const analytics = await storage.getMessageAnalytics(\n        sessionId as string, \n        start, \n        end\n      );\n\n      const campaigns = await storage.getCampaigns();\n      const contacts = await storage.getContacts();\n      const sessions = await storage.getSessions();\n\n      // Calculate statistics\n      const messagesSent = analytics.filter(a => a.messageType === 'sent').length;\n      const messagesDelivered = analytics.filter(a => a.messageType === 'delivered').length;\n      const messagesResponded = analytics.filter(a => a.messageType === 'received').length;\n      const activeContacts = contacts.length;\n\n      res.json({\n        messagesSent,\n        messagesDelivered,\n        messagesResponded,\n        activeContacts,\n        deliveryRate: messagesSent > 0 ? (messagesDelivered / messagesSent * 100).toFixed(1) : '0',\n        responseRate: messagesSent > 0 ? (messagesResponded / messagesSent * 100).toFixed(1) : '0',\n        campaigns: campaigns.slice(0, 10), // Recent campaigns\n        sessions: sessions.filter(s => s.status === 'connected')\n      });\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch analytics' });\n    }\n  });\n\n  app.get('/api/analytics/message-queue', async (req, res) => {\n    try {\n      const { sessionId } = req.query;\n      const messageQueue = await storage.getMessageQueue(sessionId as string);\n      res.json(messageQueue);\n    } catch (error) {\n      res.status(500).json({ error: 'Failed to fetch message queue' });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":15786},"server/storage.ts":{"content":"import { \n  type Contact, \n  type InsertContact,\n  type WhatsappSession,\n  type InsertWhatsappSession,\n  type Campaign,\n  type InsertCampaign,\n  type AutoReplyRule,\n  type InsertAutoReplyRule,\n  type MessageQueue,\n  type InsertMessageQueue,\n  type MessageAnalytics,\n  type User, \n  type InsertUser \n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Contacts\n  getContacts(): Promise<Contact[]>;\n  getContact(id: string): Promise<Contact | undefined>;\n  createContact(contact: InsertContact): Promise<Contact>;\n  updateContact(id: string, contact: Partial<Contact>): Promise<Contact | undefined>;\n  deleteContact(id: string): Promise<boolean>;\n  getContactsByGroups(groups: string[]): Promise<Contact[]>;\n\n  // WhatsApp Sessions\n  getSessions(): Promise<WhatsappSession[]>;\n  getSession(id: string): Promise<WhatsappSession | undefined>;\n  getSessionBySessionId(sessionId: string): Promise<WhatsappSession | undefined>;\n  createSession(session: InsertWhatsappSession): Promise<WhatsappSession>;\n  updateSession(id: string, session: Partial<WhatsappSession>): Promise<WhatsappSession | undefined>;\n  deleteSession(id: string): Promise<boolean>;\n\n  // Campaigns\n  getCampaigns(): Promise<Campaign[]>;\n  getCampaign(id: string): Promise<Campaign | undefined>;\n  createCampaign(campaign: InsertCampaign): Promise<Campaign>;\n  updateCampaign(id: string, campaign: Partial<Campaign>): Promise<Campaign | undefined>;\n  deleteCampaign(id: string): Promise<boolean>;\n\n  // Auto Reply Rules\n  getAutoReplyRules(sessionId?: string): Promise<AutoReplyRule[]>;\n  getAutoReplyRule(id: string): Promise<AutoReplyRule | undefined>;\n  createAutoReplyRule(rule: InsertAutoReplyRule): Promise<AutoReplyRule>;\n  updateAutoReplyRule(id: string, rule: Partial<AutoReplyRule>): Promise<AutoReplyRule | undefined>;\n  deleteAutoReplyRule(id: string): Promise<boolean>;\n\n  // Message Queue\n  getMessageQueue(sessionId?: string): Promise<MessageQueue[]>;\n  getQueuedMessage(id: string): Promise<MessageQueue | undefined>;\n  createQueuedMessage(message: InsertMessageQueue): Promise<MessageQueue>;\n  updateQueuedMessage(id: string, message: Partial<MessageQueue>): Promise<MessageQueue | undefined>;\n  getPendingMessages(sessionId: string): Promise<MessageQueue[]>;\n\n  // Analytics\n  getMessageAnalytics(sessionId?: string, startDate?: Date, endDate?: Date): Promise<MessageAnalytics[]>;\n  createMessageAnalytic(analytic: Omit<MessageAnalytics, 'id'>): Promise<MessageAnalytics>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private contacts: Map<string, Contact>;\n  private sessions: Map<string, WhatsappSession>;\n  private campaigns: Map<string, Campaign>;\n  private autoReplyRules: Map<string, AutoReplyRule>;\n  private messageQueue: Map<string, MessageQueue>;\n  private messageAnalytics: Map<string, MessageAnalytics>;\n\n  constructor() {\n    this.users = new Map();\n    this.contacts = new Map();\n    this.sessions = new Map();\n    this.campaigns = new Map();\n    this.autoReplyRules = new Map();\n    this.messageQueue = new Map();\n    this.messageAnalytics = new Map();\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Contacts\n  async getContacts(): Promise<Contact[]> {\n    return Array.from(this.contacts.values());\n  }\n\n  async getContact(id: string): Promise<Contact | undefined> {\n    return this.contacts.get(id);\n  }\n\n  async createContact(insertContact: InsertContact): Promise<Contact> {\n    const id = randomUUID();\n    const contact: Contact = { \n      ...insertContact, \n      id, \n      createdAt: new Date(),\n      groups: insertContact.groups || null,\n      metadata: insertContact.metadata || null,\n      email: insertContact.email || null\n    };\n    this.contacts.set(id, contact);\n    return contact;\n  }\n\n  async updateContact(id: string, contactUpdate: Partial<Contact>): Promise<Contact | undefined> {\n    const contact = this.contacts.get(id);\n    if (!contact) return undefined;\n    \n    const updated = { ...contact, ...contactUpdate };\n    this.contacts.set(id, updated);\n    return updated;\n  }\n\n  async deleteContact(id: string): Promise<boolean> {\n    return this.contacts.delete(id);\n  }\n\n  async getContactsByGroups(groups: string[]): Promise<Contact[]> {\n    return Array.from(this.contacts.values()).filter(contact =>\n      contact.groups?.some(group => groups.includes(group))\n    );\n  }\n\n  // WhatsApp Sessions\n  async getSessions(): Promise<WhatsappSession[]> {\n    return Array.from(this.sessions.values());\n  }\n\n  async getSession(id: string): Promise<WhatsappSession | undefined> {\n    return this.sessions.get(id);\n  }\n\n  async getSessionBySessionId(sessionId: string): Promise<WhatsappSession | undefined> {\n    return Array.from(this.sessions.values()).find(session => session.sessionId === sessionId);\n  }\n\n  async createSession(insertSession: InsertWhatsappSession): Promise<WhatsappSession> {\n    const id = randomUUID();\n    const session: WhatsappSession = { \n      ...insertSession, \n      id, \n      createdAt: new Date(),\n      lastSeen: null,\n      status: insertSession.status || 'pending',\n      phone: insertSession.phone || null,\n      qrCode: insertSession.qrCode || null\n    };\n    this.sessions.set(id, session);\n    return session;\n  }\n\n  async updateSession(id: string, sessionUpdate: Partial<WhatsappSession>): Promise<WhatsappSession | undefined> {\n    const session = this.sessions.get(id);\n    if (!session) return undefined;\n    \n    const updated = { ...session, ...sessionUpdate };\n    this.sessions.set(id, updated);\n    return updated;\n  }\n\n  async deleteSession(id: string): Promise<boolean> {\n    return this.sessions.delete(id);\n  }\n\n  // Campaigns\n  async getCampaigns(): Promise<Campaign[]> {\n    return Array.from(this.campaigns.values());\n  }\n\n  async getCampaign(id: string): Promise<Campaign | undefined> {\n    return this.campaigns.get(id);\n  }\n\n  async createCampaign(insertCampaign: InsertCampaign): Promise<Campaign> {\n    const id = randomUUID();\n    const campaign: Campaign = { \n      ...insertCampaign, \n      id,\n      createdAt: new Date(),\n      totalRecipients: 0,\n      messagesSent: 0,\n      messagesDelivered: 0,\n      messagesResponded: 0,\n      contactGroups: insertCampaign.contactGroups || null,\n      status: insertCampaign.status || 'draft',\n      sessionId: insertCampaign.sessionId || null,\n      mediaUrl: insertCampaign.mediaUrl || null,\n      mediaType: insertCampaign.mediaType || null,\n      scheduledAt: insertCampaign.scheduledAt || null,\n      rateLimit: insertCampaign.rateLimit ?? 30\n    };\n    this.campaigns.set(id, campaign);\n    return campaign;\n  }\n\n  async updateCampaign(id: string, campaignUpdate: Partial<Campaign>): Promise<Campaign | undefined> {\n    const campaign = this.campaigns.get(id);\n    if (!campaign) return undefined;\n    \n    const updated = { ...campaign, ...campaignUpdate };\n    this.campaigns.set(id, updated);\n    return updated;\n  }\n\n  async deleteCampaign(id: string): Promise<boolean> {\n    return this.campaigns.delete(id);\n  }\n\n  // Auto Reply Rules\n  async getAutoReplyRules(sessionId?: string): Promise<AutoReplyRule[]> {\n    const rules = Array.from(this.autoReplyRules.values());\n    return sessionId ? rules.filter(rule => rule.sessionId === sessionId) : rules;\n  }\n\n  async getAutoReplyRule(id: string): Promise<AutoReplyRule | undefined> {\n    return this.autoReplyRules.get(id);\n  }\n\n  async createAutoReplyRule(insertRule: InsertAutoReplyRule): Promise<AutoReplyRule> {\n    const id = randomUUID();\n    const rule: AutoReplyRule = { \n      ...insertRule, \n      id,\n      createdAt: new Date(),\n      keywords: insertRule.keywords || null,\n      sessionId: insertRule.sessionId || null,\n      delay: insertRule.delay || null,\n      isActive: insertRule.isActive ?? null,\n      businessHoursOnly: insertRule.businessHoursOnly ?? null,\n      businessHoursStart: insertRule.businessHoursStart || null,\n      businessHoursEnd: insertRule.businessHoursEnd || null,\n      triggerType: insertRule.triggerType || 'contains'\n    };\n    this.autoReplyRules.set(id, rule);\n    return rule;\n  }\n\n  async updateAutoReplyRule(id: string, ruleUpdate: Partial<AutoReplyRule>): Promise<AutoReplyRule | undefined> {\n    const rule = this.autoReplyRules.get(id);\n    if (!rule) return undefined;\n    \n    const updated = { ...rule, ...ruleUpdate };\n    this.autoReplyRules.set(id, updated);\n    return updated;\n  }\n\n  async deleteAutoReplyRule(id: string): Promise<boolean> {\n    return this.autoReplyRules.delete(id);\n  }\n\n  // Message Queue\n  async getMessageQueue(sessionId?: string): Promise<MessageQueue[]> {\n    const messages = Array.from(this.messageQueue.values());\n    return sessionId ? messages.filter(msg => msg.sessionId === sessionId) : messages;\n  }\n\n  async getQueuedMessage(id: string): Promise<MessageQueue | undefined> {\n    return this.messageQueue.get(id);\n  }\n\n  async createQueuedMessage(insertMessage: InsertMessageQueue): Promise<MessageQueue> {\n    const id = randomUUID();\n    const message: MessageQueue = { \n      ...insertMessage, \n      id,\n      createdAt: new Date(),\n      sentAt: null,\n      deliveredAt: null,\n      status: insertMessage.status || 'pending',\n      sessionId: insertMessage.sessionId || null,\n      mediaUrl: insertMessage.mediaUrl || null,\n      mediaType: insertMessage.mediaType || null,\n      scheduledAt: insertMessage.scheduledAt || null,\n      contactId: insertMessage.contactId || null,\n      campaignId: insertMessage.campaignId || null,\n      errorMessage: insertMessage.errorMessage || null\n    };\n    this.messageQueue.set(id, message);\n    return message;\n  }\n\n  async updateQueuedMessage(id: string, messageUpdate: Partial<MessageQueue>): Promise<MessageQueue | undefined> {\n    const message = this.messageQueue.get(id);\n    if (!message) return undefined;\n    \n    const updated = { ...message, ...messageUpdate };\n    this.messageQueue.set(id, updated);\n    return updated;\n  }\n\n  async getPendingMessages(sessionId: string): Promise<MessageQueue[]> {\n    return Array.from(this.messageQueue.values()).filter(msg => \n      msg.sessionId === sessionId && msg.status === 'pending'\n    );\n  }\n\n  // Analytics\n  async getMessageAnalytics(sessionId?: string, startDate?: Date, endDate?: Date): Promise<MessageAnalytics[]> {\n    let analytics = Array.from(this.messageAnalytics.values());\n    \n    if (sessionId) {\n      analytics = analytics.filter(a => a.sessionId === sessionId);\n    }\n    \n    if (startDate) {\n      analytics = analytics.filter(a => a.timestamp && a.timestamp >= startDate);\n    }\n    \n    if (endDate) {\n      analytics = analytics.filter(a => a.timestamp && a.timestamp <= endDate);\n    }\n    \n    return analytics;\n  }\n\n  async createMessageAnalytic(analytic: Omit<MessageAnalytics, 'id'>): Promise<MessageAnalytics> {\n    const id = randomUUID();\n    const messageAnalytic: MessageAnalytics = { ...analytic, id };\n    this.messageAnalytics.set(id, messageAnalytic);\n    return messageAnalytic;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":11620},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const contacts = pgTable(\"contacts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  email: text(\"email\"),\n  groups: text(\"groups\").array().default([]),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const whatsappSessions = pgTable(\"whatsapp_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: text(\"session_id\").notNull().unique(),\n  phone: text(\"phone\"),\n  status: text(\"status\").notNull().default(\"disconnected\"), // connected, disconnected, connecting, qr_pending\n  qrCode: text(\"qr_code\"),\n  lastSeen: timestamp(\"last_seen\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const campaigns = pgTable(\"campaigns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  message: text(\"message\").notNull(),\n  contactGroups: text(\"contact_groups\").array().default([]),\n  mediaUrl: text(\"media_url\"),\n  mediaType: text(\"media_type\"), // image, video, document, audio\n  status: text(\"status\").notNull().default(\"draft\"), // draft, scheduled, sending, completed, paused\n  scheduledAt: timestamp(\"scheduled_at\"),\n  rateLimit: integer(\"rate_limit\").default(30), // messages per minute\n  totalRecipients: integer(\"total_recipients\").default(0),\n  messagesSent: integer(\"messages_sent\").default(0),\n  messagesDelivered: integer(\"messages_delivered\").default(0),\n  messagesResponded: integer(\"messages_responded\").default(0),\n  sessionId: varchar(\"session_id\").references(() => whatsappSessions.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const autoReplyRules = pgTable(\"auto_reply_rules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  keywords: text(\"keywords\").array().default([]),\n  triggerType: text(\"trigger_type\").notNull().default(\"contains\"), // contains, exact, starts_with, ends_with, any, first_message\n  response: text(\"response\").notNull(),\n  delay: integer(\"delay\").default(0), // delay in seconds\n  isActive: boolean(\"is_active\").default(true),\n  businessHoursOnly: boolean(\"business_hours_only\").default(false),\n  businessHoursStart: text(\"business_hours_start\").default(\"09:00\"),\n  businessHoursEnd: text(\"business_hours_end\").default(\"18:00\"),\n  sessionId: varchar(\"session_id\").references(() => whatsappSessions.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const messageQueue = pgTable(\"message_queue\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  campaignId: varchar(\"campaign_id\").references(() => campaigns.id),\n  contactId: varchar(\"contact_id\").references(() => contacts.id),\n  message: text(\"message\").notNull(),\n  mediaUrl: text(\"media_url\"),\n  mediaType: text(\"media_type\"),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, sent, delivered, failed\n  scheduledAt: timestamp(\"scheduled_at\"),\n  sentAt: timestamp(\"sent_at\"),\n  deliveredAt: timestamp(\"delivered_at\"),\n  errorMessage: text(\"error_message\"),\n  sessionId: varchar(\"session_id\").references(() => whatsappSessions.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const messageAnalytics = pgTable(\"message_analytics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  messageId: varchar(\"message_id\").references(() => messageQueue.id),\n  contactPhone: text(\"contact_phone\").notNull(),\n  messageType: text(\"message_type\").notNull(), // sent, received, delivered, read\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n  sessionId: varchar(\"session_id\").references(() => whatsappSessions.id),\n});\n\n// Insert schemas\nexport const insertContactSchema = createInsertSchema(contacts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSessionSchema = createInsertSchema(whatsappSessions).omit({\n  id: true,\n  createdAt: true,\n  lastSeen: true,\n});\n\nexport const insertCampaignSchema = createInsertSchema(campaigns).omit({\n  id: true,\n  createdAt: true,\n  totalRecipients: true,\n  messagesSent: true,\n  messagesDelivered: true,\n  messagesResponded: true,\n});\n\nexport const insertAutoReplyRuleSchema = createInsertSchema(autoReplyRules).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMessageQueueSchema = createInsertSchema(messageQueue).omit({\n  id: true,\n  createdAt: true,\n  sentAt: true,\n  deliveredAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\n// Types\nexport type Contact = typeof contacts.$inferSelect;\nexport type InsertContact = z.infer<typeof insertContactSchema>;\n\nexport type WhatsappSession = typeof whatsappSessions.$inferSelect;\nexport type InsertWhatsappSession = z.infer<typeof insertSessionSchema>;\n\nexport type Campaign = typeof campaigns.$inferSelect;\nexport type InsertCampaign = z.infer<typeof insertCampaignSchema>;\n\nexport type AutoReplyRule = typeof autoReplyRules.$inferSelect;\nexport type InsertAutoReplyRule = z.infer<typeof insertAutoReplyRuleSchema>;\n\nexport type MessageQueue = typeof messageQueue.$inferSelect;\nexport type InsertMessageQueue = z.infer<typeof insertMessageQueueSchema>;\n\nexport type MessageAnalytics = typeof messageAnalytics.$inferSelect;\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n","size_bytes":5803},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Campaigns from \"@/pages/campaigns\";\nimport Contacts from \"@/pages/contacts\";\nimport AutoReply from \"@/pages/auto-reply\";\nimport Scheduler from \"@/pages/scheduler\";\nimport Sessions from \"@/pages/sessions\";\nimport Analytics from \"@/pages/analytics\";\nimport Settings from \"@/pages/settings\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/campaigns\" component={Campaigns} />\n      <Route path=\"/contacts\" component={Contacts} />\n      <Route path=\"/auto-reply\" component={AutoReply} />\n      <Route path=\"/scheduler\" component={Scheduler} />\n      <Route path=\"/sessions\" component={Sessions} />\n      <Route path=\"/analytics\" component={Analytics} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1397},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  \n  /* WhatsApp specific colors */\n  --whatsapp-50: hsl(152 50% 96%);\n  --whatsapp-100: hsl(152 40% 88%);\n  --whatsapp-500: hsl(142 68% 46%);\n  --whatsapp-600: hsl(142 76% 36%);\n  --whatsapp-700: hsl(142 82% 28%);\n  \n  /* Additional colors for the design */\n  --blue-50: hsl(214 100% 97%);\n  --blue-100: hsl(214 95% 93%);\n  --blue-600: hsl(217 91% 60%);\n  --purple-50: hsl(270 100% 98%);\n  --purple-100: hsl(270 87% 96%);\n  --purple-600: hsl(271 81% 56%);\n  --orange-50: hsl(33 100% 96%);\n  --orange-100: hsl(34 100% 92%);\n  --orange-600: hsl(25 95% 53%);\n  --gray-50: hsl(210 20% 98%);\n  --gray-100: hsl(220 14% 96%);\n  --gray-200: hsl(220 13% 91%);\n  --gray-300: hsl(216 12% 84%);\n  --gray-400: hsl(218 11% 65%);\n  --gray-500: hsl(220 9% 46%);\n  --gray-600: hsl(215 14% 34%);\n  --gray-700: hsl(217 19% 27%);\n  --gray-800: hsl(215 28% 17%);\n  --gray-900: hsl(221 39% 11%);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-gray-50 text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n\n@layer utilities {\n  .text-whatsapp-50 { color: var(--whatsapp-50); }\n  .text-whatsapp-500 { color: var(--whatsapp-500); }\n  .text-whatsapp-600 { color: var(--whatsapp-600); }\n  .text-whatsapp-700 { color: var(--whatsapp-700); }\n  \n  .bg-whatsapp-50 { background-color: var(--whatsapp-50); }\n  .bg-whatsapp-100 { background-color: var(--whatsapp-100); }\n  .bg-whatsapp-500 { background-color: var(--whatsapp-500); }\n  .bg-whatsapp-600 { background-color: var(--whatsapp-600); }\n  .bg-whatsapp-700 { background-color: var(--whatsapp-700); }\n  \n  .border-whatsapp-500 { border-color: var(--whatsapp-500); }\n  \n  .hover\\:bg-whatsapp-600:hover { background-color: var(--whatsapp-600); }\n  .hover\\:bg-whatsapp-100:hover { background-color: var(--whatsapp-100); }\n  .hover\\:text-whatsapp-700:hover { color: var(--whatsapp-700); }\n  \n  /* Additional color utilities */\n  .bg-blue-50 { background-color: var(--blue-50); }\n  .bg-blue-100 { background-color: var(--blue-100); }\n  .text-blue-600 { color: var(--blue-600); }\n  .text-blue-700 { color: var(--blue-700); }\n  .hover\\:bg-blue-100:hover { background-color: var(--blue-100); }\n  \n  .bg-purple-50 { background-color: var(--purple-50); }\n  .bg-purple-100 { background-color: var(--purple-100); }\n  .text-purple-600 { color: var(--purple-600); }\n  .text-purple-700 { color: var(--purple-700); }\n  .hover\\:bg-purple-100:hover { background-color: var(--purple-100); }\n  \n  .bg-orange-50 { background-color: var(--orange-50); }\n  .bg-orange-100 { background-color: var(--orange-100); }\n  .text-orange-600 { color: var(--orange-600); }\n  .text-orange-700 { color: var(--orange-700); }\n  .hover\\:bg-orange-100:hover { background-color: var(--orange-100); }\n  \n  .bg-gray-50 { background-color: var(--gray-50); }\n  .bg-gray-100 { background-color: var(--gray-100); }\n  .bg-gray-200 { background-color: var(--gray-200); }\n  .bg-gray-300 { background-color: var(--gray-300); }\n  .text-gray-400 { color: var(--gray-400); }\n  .text-gray-500 { color: var(--gray-500); }\n  .text-gray-600 { color: var(--gray-600); }\n  .text-gray-700 { color: var(--gray-700); }\n  .text-gray-800 { color: var(--gray-800); }\n  .text-gray-900 { color: var(--gray-900); }\n  .border-gray-200 { border-color: var(--gray-200); }\n  .border-gray-300 { border-color: var(--gray-300); }\n  .hover\\:bg-gray-50:hover { background-color: var(--gray-50); }\n}\n","size_bytes":6692},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/scheduler.ts":{"content":"import cron from 'node-cron';\nimport { storage } from '../storage';\nimport { whatsappService } from './whatsapp';\nimport { parseSpintax } from './spintax';\nimport type { Campaign, MessageQueue } from '@shared/schema';\n\nexport class SchedulerService {\n  private scheduledJobs: Map<string, cron.ScheduledTask> = new Map();\n  private messageProcessor: NodeJS.Timeout | null = null;\n\n  constructor() {\n    // Start message processor every 30 seconds\n    this.startMessageProcessor();\n  }\n\n  private startMessageProcessor() {\n    this.messageProcessor = setInterval(async () => {\n      await this.processQueuedMessages();\n    }, 30000); // Process every 30 seconds\n  }\n\n  async scheduleCampaign(campaign: Campaign): Promise<void> {\n    if (!campaign.scheduledAt) {\n      // If no scheduled time, process immediately\n      await this.processCampaign(campaign);\n      return;\n    }\n\n    const scheduleTime = new Date(campaign.scheduledAt);\n    const now = new Date();\n\n    if (scheduleTime <= now) {\n      // If scheduled time is in the past, process immediately\n      await this.processCampaign(campaign);\n      return;\n    }\n\n    // Create cron job for future execution\n    const cronExpression = this.dateToCronExpression(scheduleTime);\n    \n    const job = cron.schedule(cronExpression, async () => {\n      await this.processCampaign(campaign);\n      this.scheduledJobs.delete(campaign.id);\n    }, {\n      timezone: \"UTC\"\n    });\n\n    job.start();\n    this.scheduledJobs.set(campaign.id, job);\n\n    // Update campaign status\n    await storage.updateCampaign(campaign.id, { status: 'scheduled' });\n  }\n\n  private async processCampaign(campaign: Campaign): Promise<void> {\n    try {\n      // Update campaign status to sending\n      await storage.updateCampaign(campaign.id, { status: 'sending' });\n\n      // Get contacts based on contact groups\n      let contacts = [];\n      \n      if (!campaign.contactGroups || campaign.contactGroups.length === 0) {\n        // If no specific groups, get all contacts\n        contacts = await storage.getContacts();\n      } else {\n        contacts = await storage.getContactsByGroups(campaign.contactGroups);\n      }\n\n      // Update total recipients\n      await storage.updateCampaign(campaign.id, { \n        totalRecipients: contacts.length \n      });\n\n      // Create message queue entries for each contact\n      for (const contact of contacts) {\n        // Parse message with contact variables\n        let personalizedMessage = this.personalizeMessage(campaign.message, contact);\n        \n        // Apply spintax\n        personalizedMessage = parseSpintax(personalizedMessage);\n\n        await storage.createQueuedMessage({\n          campaignId: campaign.id,\n          contactId: contact.id,\n          message: personalizedMessage,\n          mediaUrl: campaign.mediaUrl,\n          mediaType: campaign.mediaType,\n          status: 'pending',\n          scheduledAt: new Date(),\n          sessionId: campaign.sessionId\n        });\n      }\n\n      console.log(`Campaign ${campaign.name} processed: ${contacts.length} messages queued`);\n\n    } catch (error) {\n      console.error('Error processing campaign:', error);\n      await storage.updateCampaign(campaign.id, { status: 'failed' });\n    }\n  }\n\n  private async processQueuedMessages(): Promise<void> {\n    try {\n      // Get all active sessions\n      const sessions = await storage.getSessions();\n      \n      for (const session of sessions) {\n        if (session.status !== 'connected') continue;\n\n        // Get pending messages for this session\n        const pendingMessages = await storage.getPendingMessages(session.id);\n        \n        if (pendingMessages.length === 0) continue;\n\n        // Get campaign for rate limiting\n        const firstMessage = pendingMessages[0];\n        const campaign = firstMessage.campaignId ? \n          await storage.getCampaign(firstMessage.campaignId) : null;\n        \n        const rateLimit = campaign?.rateLimit || 30; // messages per minute\n        const batchSize = Math.min(rateLimit, pendingMessages.length);\n        const messagesToProcess = pendingMessages.slice(0, batchSize);\n\n        console.log(`Processing ${messagesToProcess.length} messages for session ${session.sessionId}`);\n\n        for (const message of messagesToProcess) {\n          try {\n            const contact = await storage.getContact(message.contactId!);\n            if (!contact) continue;\n\n            // Send message via WhatsApp\n            await whatsappService.sendMessage(\n              session.sessionId,\n              contact.phone,\n              message.message,\n              message.mediaUrl || undefined,\n              message.mediaType || undefined\n            );\n\n            // Update message status\n            await storage.updateQueuedMessage(message.id, {\n              status: 'sent',\n              sentAt: new Date()\n            });\n\n            // Update campaign stats\n            if (message.campaignId) {\n              const currentCampaign = await storage.getCampaign(message.campaignId);\n              if (currentCampaign) {\n                await storage.updateCampaign(message.campaignId, {\n                  messagesSent: (currentCampaign.messagesSent || 0) + 1\n                });\n              }\n            }\n\n            // Delay between messages to avoid rate limiting\n            if (batchSize > 1) {\n              await new Promise(resolve => setTimeout(resolve, 2000)); // 2 second delay\n            }\n\n          } catch (error) {\n            console.error('Error sending message:', error);\n            \n            // Update message status to failed\n            await storage.updateQueuedMessage(message.id, {\n              status: 'failed',\n              errorMessage: error instanceof Error ? error.message : 'Unknown error'\n            });\n          }\n        }\n\n        // Check if campaign is complete\n        if (firstMessage.campaignId) {\n          await this.checkCampaignCompletion(firstMessage.campaignId);\n        }\n      }\n\n    } catch (error) {\n      console.error('Error processing message queue:', error);\n    }\n  }\n\n  private async checkCampaignCompletion(campaignId: string): Promise<void> {\n    const campaign = await storage.getCampaign(campaignId);\n    if (!campaign) return;\n\n    const pendingMessages = await storage.getMessageQueue();\n    const campaignPending = pendingMessages.filter(msg => \n      msg.campaignId === campaignId && msg.status === 'pending'\n    );\n\n    if (campaignPending.length === 0) {\n      // Campaign is complete\n      await storage.updateCampaign(campaignId, { status: 'completed' });\n      console.log(`Campaign ${campaign.name} completed`);\n    }\n  }\n\n  private personalizeMessage(template: string, contact: any): string {\n    let message = template;\n    \n    // Replace common variables\n    message = message.replace(/\\{name\\}/g, contact.name || 'there');\n    message = message.replace(/\\{phone\\}/g, contact.phone || '');\n    message = message.replace(/\\{email\\}/g, contact.email || '');\n    \n    // Replace any custom metadata fields\n    if (contact.metadata) {\n      Object.keys(contact.metadata).forEach(key => {\n        const regex = new RegExp(`\\\\{${key}\\\\}`, 'g');\n        message = message.replace(regex, contact.metadata[key] || '');\n      });\n    }\n    \n    return message;\n  }\n\n  private dateToCronExpression(date: Date): string {\n    const minute = date.getMinutes();\n    const hour = date.getHours();\n    const day = date.getDate();\n    const month = date.getMonth() + 1;\n    const year = date.getFullYear();\n    \n    return `${minute} ${hour} ${day} ${month} *`;\n  }\n\n  cancelScheduledCampaign(campaignId: string): void {\n    const job = this.scheduledJobs.get(campaignId);\n    if (job) {\n      job.stop();\n      this.scheduledJobs.delete(campaignId);\n    }\n  }\n\n  stopScheduler(): void {\n    // Stop all scheduled jobs\n    this.scheduledJobs.forEach(job => job.stop());\n    this.scheduledJobs.clear();\n    \n    // Stop message processor\n    if (this.messageProcessor) {\n      clearInterval(this.messageProcessor);\n      this.messageProcessor = null;\n    }\n  }\n}\n\nexport const schedulerService = new SchedulerService();\n","size_bytes":8126},"server/services/spintax.ts":{"content":"export function parseSpintax(text: string): string {\n  // Find spintax patterns like {option1|option2|option3}\n  const spintaxPattern = /\\{([^{}]*\\|[^{}]*)\\}/g;\n  \n  let result = text;\n  let match;\n  \n  while ((match = spintaxPattern.exec(result)) !== null) {\n    const fullMatch = match[0];\n    const options = match[1].split('|');\n    \n    // Select random option\n    const randomOption = options[Math.floor(Math.random() * options.length)];\n    \n    // Replace the spintax with the selected option\n    result = result.replace(fullMatch, randomOption.trim());\n    \n    // Reset regex to start from beginning since we modified the string\n    spintaxPattern.lastIndex = 0;\n  }\n  \n  return result;\n}\n\nexport function validateSpintax(text: string): { isValid: boolean; errors: string[] } {\n  const errors: string[] = [];\n  \n  // Check for balanced braces\n  let braceCount = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === '{') {\n      braceCount++;\n    } else if (text[i] === '}') {\n      braceCount--;\n      if (braceCount < 0) {\n        errors.push('Unmatched closing brace }');\n        break;\n      }\n    }\n  }\n  \n  if (braceCount > 0) {\n    errors.push('Unmatched opening brace {');\n  }\n  \n  // Check for valid spintax patterns\n  const spintaxPattern = /\\{([^{}]*)\\}/g;\n  let match;\n  \n  while ((match = spintaxPattern.exec(text)) !== null) {\n    const content = match[1];\n    \n    if (!content.includes('|')) {\n      errors.push(`Invalid spintax pattern: ${match[0]} (missing pipe separator)`);\n    } else {\n      const options = content.split('|');\n      if (options.some(option => option.trim() === '')) {\n        errors.push(`Empty option in spintax pattern: ${match[0]}`);\n      }\n    }\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n}\n\nexport function countSpintaxVariations(text: string): number {\n  const spintaxPattern = /\\{([^{}]*\\|[^{}]*)\\}/g;\n  let totalVariations = 1;\n  let match;\n  \n  while ((match = spintaxPattern.exec(text)) !== null) {\n    const options = match[1].split('|');\n    totalVariations *= options.length;\n  }\n  \n  return totalVariations;\n}\n\nexport function generateAllSpintaxVariations(text: string, maxVariations: number = 100): string[] {\n  const variations: string[] = [];\n  const spintaxPattern = /\\{([^{}]*\\|[^{}]*)\\}/g;\n  \n  function generateVariation(inputText: string): string {\n    let result = inputText;\n    let match;\n    \n    while ((match = spintaxPattern.exec(result)) !== null) {\n      const fullMatch = match[0];\n      const options = match[1].split('|');\n      const randomOption = options[Math.floor(Math.random() * options.length)];\n      \n      result = result.replace(fullMatch, randomOption.trim());\n      spintaxPattern.lastIndex = 0;\n    }\n    \n    return result;\n  }\n  \n  // Generate unique variations\n  const uniqueVariations = new Set<string>();\n  let attempts = 0;\n  const maxAttempts = maxVariations * 10; // Prevent infinite loops\n  \n  while (uniqueVariations.size < maxVariations && attempts < maxAttempts) {\n    const variation = generateVariation(text);\n    uniqueVariations.add(variation);\n    attempts++;\n  }\n  \n  return Array.from(uniqueVariations);\n}\n","size_bytes":3159},"server/services/whatsapp.ts":{"content":"import { createRequire } from 'module';\nconst require = createRequire(import.meta.url);\nconst baileys = require('@whiskeysockets/baileys');\nconst {\n  makeWASocket,\n  ConnectionState, \n  DisconnectReason, \n  useMultiFileAuthState, \n  MessageType,\n  proto,\n  downloadMediaMessage,\n  WAMessageKey\n} = baileys;\nimport type { WASocket } from '@whiskeysockets/baileys';\nimport { Boom } from '@hapi/boom';\nimport QRCode from 'qrcode';\nimport fs from 'fs';\nimport path from 'path';\nimport { storage } from '../storage';\nimport type { WhatsappSession } from '@shared/schema';\n\ninterface SessionData {\n  socket: WASocket | null;\n  qr: string | null;\n  status: string;\n  phone: string | null;\n}\n\nexport class WhatsAppService {\n  private sessions: Map<string, SessionData> = new Map();\n  private authDir = path.join(process.cwd(), 'auth_sessions');\n\n  constructor() {\n    // Ensure auth directory exists\n    if (!fs.existsSync(this.authDir)) {\n      fs.mkdirSync(this.authDir, { recursive: true });\n    }\n  }\n\n  async createSession(sessionId: string): Promise<{ qrCode: string | null }> {\n    try {\n      const sessionPath = path.join(this.authDir, sessionId);\n      \n      // Ensure session directory exists\n      if (!fs.existsSync(sessionPath)) {\n        fs.mkdirSync(sessionPath, { recursive: true });\n      }\n\n      const { state, saveCreds } = await useMultiFileAuthState(sessionPath);\n      \n      const socket = makeWASocket({\n        auth: state,\n        printQRInTerminal: false,\n        browser: ['Waziper', 'Chrome', '1.0.0']\n      });\n\n      // Initialize session data\n      const sessionData: SessionData = {\n        socket,\n        qr: null,\n        status: 'connecting',\n        phone: null\n      };\n\n      this.sessions.set(sessionId, sessionData);\n\n      // Handle connection events\n      socket.ev.on('connection.update', async (update) => {\n        await this.handleConnectionUpdate(sessionId, update);\n      });\n\n      socket.ev.on('creds.update', saveCreds);\n\n      // Handle incoming messages for auto-reply\n      socket.ev.on('messages.upsert', async (m) => {\n        await this.handleIncomingMessages(sessionId, m);\n      });\n\n      // Handle message status updates\n      socket.ev.on('message-receipt.update', async (updates) => {\n        await this.handleMessageReceipts(sessionId, updates);\n      });\n\n      // Wait for QR or connection\n      return new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          resolve({ qrCode: sessionData.qr });\n        }, 10000);\n\n        socket.ev.on('connection.update', async (update) => {\n          if (update.qr) {\n            try {\n              const qrCodeDataUrl = await QRCode.toDataURL(update.qr);\n              sessionData.qr = qrCodeDataUrl;\n              sessionData.status = 'qr_pending';\n              clearTimeout(timeout);\n              resolve({ qrCode: qrCodeDataUrl });\n            } catch (error) {\n              console.error('Error generating QR code:', error);\n              clearTimeout(timeout);\n              resolve({ qrCode: null });\n            }\n          } else if (update.connection === 'open') {\n            clearTimeout(timeout);\n            resolve({ qrCode: null });\n          }\n        });\n      });\n\n    } catch (error) {\n      console.error('Error creating WhatsApp session:', error);\n      throw new Error('Failed to create WhatsApp session');\n    }\n  }\n\n  private async handleConnectionUpdate(sessionId: string, update: Partial<ConnectionState>) {\n    const sessionData = this.sessions.get(sessionId);\n    if (!sessionData) return;\n\n    const { connection, lastDisconnect, qr } = update;\n\n    if (qr) {\n      try {\n        const qrCodeDataUrl = await QRCode.toDataURL(qr);\n        sessionData.qr = qrCodeDataUrl;\n        sessionData.status = 'qr_pending';\n        \n        // Update database\n        await storage.updateSession(sessionId, { \n          qrCode: qrCodeDataUrl, \n          status: 'qr_pending' \n        });\n      } catch (error) {\n        console.error('Error generating QR code:', error);\n      }\n    }\n\n    if (connection === 'close') {\n      const shouldReconnect = (lastDisconnect?.error as Boom)?.output?.statusCode !== DisconnectReason.loggedOut;\n      \n      if (shouldReconnect) {\n        sessionData.status = 'connecting';\n        await storage.updateSession(sessionId, { status: 'connecting' });\n        // Reconnect after delay\n        setTimeout(() => this.createSession(sessionId), 3000);\n      } else {\n        sessionData.status = 'disconnected';\n        sessionData.socket = null;\n        sessionData.phone = null;\n        await storage.updateSession(sessionId, { \n          status: 'disconnected',\n          phone: null,\n          qrCode: null \n        });\n      }\n    } else if (connection === 'open') {\n      sessionData.status = 'connected';\n      sessionData.qr = null;\n      \n      // Get phone number\n      const phoneNumber = sessionData.socket?.user?.id?.split(':')[0];\n      if (phoneNumber) {\n        sessionData.phone = phoneNumber;\n      }\n\n      await storage.updateSession(sessionId, { \n        status: 'connected',\n        phone: sessionData.phone,\n        qrCode: null,\n        lastSeen: new Date()\n      });\n    }\n  }\n\n  private async handleIncomingMessages(sessionId: string, messageUpdate: any) {\n    const messages = messageUpdate.messages;\n    if (!messages || messages.length === 0) return;\n\n    for (const message of messages) {\n      if (message.key.fromMe) continue; // Skip messages sent by us\n\n      const fromNumber = message.key.remoteJid?.split('@')[0];\n      const messageText = message.message?.conversation || \n                         message.message?.extendedTextMessage?.text || '';\n\n      if (!fromNumber || !messageText) continue;\n\n      // Check auto-reply rules\n      const autoReplyRules = await storage.getAutoReplyRules(sessionId);\n      \n      for (const rule of autoReplyRules) {\n        if (!rule.isActive) continue;\n\n        const shouldReply = this.checkAutoReplyTrigger(messageText, rule);\n        \n        if (shouldReply) {\n          // Apply delay if specified\n          if (rule.delay && rule.delay > 0) {\n            setTimeout(() => {\n              this.sendAutoReply(sessionId, fromNumber, rule.response);\n            }, rule.delay * 1000);\n          } else {\n            await this.sendAutoReply(sessionId, fromNumber, rule.response);\n          }\n          break; // Only trigger first matching rule\n        }\n      }\n\n      // Log message analytics\n      await storage.createMessageAnalytic({\n        messageId: null,\n        contactPhone: fromNumber,\n        messageType: 'received',\n        timestamp: new Date(),\n        sessionId\n      });\n    }\n  }\n\n  private checkAutoReplyTrigger(messageText: string, rule: any): boolean {\n    const text = messageText.toLowerCase();\n    \n    switch (rule.triggerType) {\n      case 'contains':\n        return rule.keywords.some((keyword: string) => \n          text.includes(keyword.toLowerCase())\n        );\n      case 'exact':\n        return rule.keywords.some((keyword: string) => \n          text === keyword.toLowerCase()\n        );\n      case 'starts_with':\n        return rule.keywords.some((keyword: string) => \n          text.startsWith(keyword.toLowerCase())\n        );\n      case 'ends_with':\n        return rule.keywords.some((keyword: string) => \n          text.endsWith(keyword.toLowerCase())\n        );\n      case 'any':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  private async sendAutoReply(sessionId: string, toNumber: string, response: string) {\n    const sessionData = this.sessions.get(sessionId);\n    if (!sessionData?.socket) return;\n\n    try {\n      await sessionData.socket.sendMessage(`${toNumber}@s.whatsapp.net`, {\n        text: response\n      });\n\n      // Log sent message\n      await storage.createMessageAnalytic({\n        messageId: null,\n        contactPhone: toNumber,\n        messageType: 'sent',\n        timestamp: new Date(),\n        sessionId\n      });\n    } catch (error) {\n      console.error('Error sending auto-reply:', error);\n    }\n  }\n\n  private async handleMessageReceipts(sessionId: string, updates: any[]) {\n    for (const update of updates) {\n      const { key, receipt } = update;\n      \n      if (receipt?.readTimestamp || receipt?.deliveredTimestamp) {\n        const messageType = receipt.readTimestamp ? 'read' : 'delivered';\n        const contactPhone = key.remoteJid?.split('@')[0];\n        \n        if (contactPhone) {\n          await storage.createMessageAnalytic({\n            messageId: null,\n            contactPhone,\n            messageType,\n            timestamp: new Date(),\n            sessionId\n          });\n        }\n      }\n    }\n  }\n\n  async sendMessage(sessionId: string, toNumber: string, message: string, mediaUrl?: string, mediaType?: string): Promise<boolean> {\n    const sessionData = this.sessions.get(sessionId);\n    if (!sessionData?.socket || sessionData.status !== 'connected') {\n      throw new Error('WhatsApp session not connected');\n    }\n\n    try {\n      const jid = `${toNumber}@s.whatsapp.net`;\n      \n      if (mediaUrl && mediaType) {\n        // Send media message\n        const mediaBuffer = fs.readFileSync(mediaUrl);\n        \n        let messageContent: any = {};\n        \n        switch (mediaType) {\n          case 'image':\n            messageContent = { image: mediaBuffer, caption: message };\n            break;\n          case 'video':\n            messageContent = { video: mediaBuffer, caption: message };\n            break;\n          case 'document':\n            messageContent = { \n              document: mediaBuffer, \n              mimetype: 'application/pdf',\n              fileName: path.basename(mediaUrl)\n            };\n            break;\n          case 'audio':\n            messageContent = { audio: mediaBuffer };\n            break;\n          default:\n            messageContent = { text: message };\n        }\n        \n        await sessionData.socket.sendMessage(jid, messageContent);\n      } else {\n        // Send text message\n        await sessionData.socket.sendMessage(jid, { text: message });\n      }\n\n      // Log sent message\n      await storage.createMessageAnalytic({\n        messageId: null,\n        contactPhone: toNumber,\n        messageType: 'sent',\n        timestamp: new Date(),\n        sessionId\n      });\n\n      return true;\n    } catch (error) {\n      console.error('Error sending message:', error);\n      throw error;\n    }\n  }\n\n  async disconnectSession(sessionId: string): Promise<void> {\n    const sessionData = this.sessions.get(sessionId);\n    if (sessionData?.socket) {\n      await sessionData.socket.logout();\n      sessionData.socket = null;\n    }\n    \n    this.sessions.delete(sessionId);\n    await storage.updateSession(sessionId, { \n      status: 'disconnected',\n      phone: null,\n      qrCode: null\n    });\n  }\n\n  getSessionStatus(sessionId: string): SessionData | null {\n    return this.sessions.get(sessionId) || null;\n  }\n\n  getAllSessionStatuses(): Map<string, SessionData> {\n    return this.sessions;\n  }\n}\n\nexport const whatsappService = new WhatsAppService();\n","size_bytes":11077},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\n\ninterface WebSocketMessage {\n  type: string;\n  data: any;\n}\n\nexport function useWebSocket() {\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n  const ws = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  const connect = () => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    ws.current = new WebSocket(wsUrl);\n\n    ws.current.onopen = () => {\n      setIsConnected(true);\n      console.log(\"WebSocket connected\");\n    };\n\n    ws.current.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        setLastMessage(message);\n      } catch (error) {\n        console.error(\"Error parsing WebSocket message:\", error);\n      }\n    };\n\n    ws.current.onclose = () => {\n      setIsConnected(false);\n      console.log(\"WebSocket disconnected\");\n      \n      // Attempt to reconnect after 3 seconds\n      reconnectTimeoutRef.current = setTimeout(() => {\n        connect();\n      }, 3000);\n    };\n\n    ws.current.onerror = (error) => {\n      console.error(\"WebSocket error:\", error);\n    };\n  };\n\n  useEffect(() => {\n    connect();\n\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, []);\n\n  const sendMessage = (message: any) => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify(message));\n    }\n  };\n\n  return {\n    isConnected,\n    lastMessage,\n    sendMessage\n  };\n}\n","size_bytes":1783},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/analytics.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/layout/header\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { \n  BarChart3, \n  TrendingUp, \n  Users, \n  MessageSquare, \n  CheckCheck, \n  MessageCircle,\n  Download,\n  Calendar,\n  Filter\n} from \"lucide-react\";\nimport { format, subDays } from \"date-fns\";\n\nexport default function Analytics() {\n  const [dateRange, setDateRange] = useState(\"7days\");\n  const { lastMessage } = useWebSocket();\n\n  const { data: analytics, isLoading, refetch } = useQuery({\n    queryKey: [\"/api/analytics/dashboard\", dateRange],\n  });\n\n  const { data: sessions = [] } = useQuery({\n    queryKey: [\"/api/sessions\"],\n  });\n\n  const { data: campaigns = [] } = useQuery({\n    queryKey: [\"/api/campaigns\"],\n  });\n\n  useEffect(() => {\n    if (lastMessage?.type?.includes('campaign') || lastMessage?.type?.includes('message')) {\n      refetch();\n    }\n  }, [lastMessage, refetch]);\n\n  const connectedSessions = sessions.filter((s: any) => s.status === 'connected');\n\n  const statsCards = [\n    {\n      title: \"Messages Sent\",\n      value: analytics?.messagesSent?.toLocaleString() || \"0\",\n      change: \"+12.5%\",\n      changeType: \"positive\",\n      icon: MessageSquare,\n      iconBg: \"bg-blue-100\",\n      iconColor: \"text-blue-600\"\n    },\n    {\n      title: \"Delivered\",\n      value: analytics?.messagesDelivered?.toLocaleString() || \"0\",\n      change: `${analytics?.deliveryRate || 0}%`,\n      changeLabel: \"delivery rate\",\n      icon: CheckCheck,\n      iconBg: \"bg-whatsapp-100\",\n      iconColor: \"text-whatsapp-600\"\n    },\n    {\n      title: \"Responses\",\n      value: analytics?.messagesResponded?.toLocaleString() || \"0\",\n      change: `${analytics?.responseRate || 0}%`,\n      changeLabel: \"response rate\",\n      icon: MessageCircle,\n      iconBg: \"bg-purple-100\",\n      iconColor: \"text-purple-600\"\n    },\n    {\n      title: \"Active Contacts\",\n      value: analytics?.activeContacts?.toLocaleString() || \"0\",\n      change: \"+156\",\n      changeLabel: \"this period\",\n      icon: Users,\n      iconBg: \"bg-orange-100\",\n      iconColor: \"text-orange-600\"\n    }\n  ];\n\n  const getDateRangeText = (range: string) => {\n    switch (range) {\n      case \"today\":\n        return \"Today\";\n      case \"7days\":\n        return \"Last 7 days\";\n      case \"30days\":\n        return \"Last 30 days\";\n      case \"90days\":\n        return \"Last 90 days\";\n      default:\n        return \"Last 7 days\";\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar connectedSessions={connectedSessions} />\n      \n      <div className=\"flex-1 overflow-hidden\">\n        <Header \n          title=\"Analytics\" \n          subtitle=\"Track your messaging performance and campaign effectiveness\"\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* Date Range Selector */}\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Calendar className=\"w-5 h-5 text-gray-400\" />\n                <select\n                  value={dateRange}\n                  onChange={(e) => setDateRange(e.target.value)}\n                  className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-whatsapp-500 focus:border-whatsapp-500\"\n                  data-testid=\"select-date-range\"\n                >\n                  <option value=\"today\">Today</option>\n                  <option value=\"7days\">Last 7 days</option>\n                  <option value=\"30days\">Last 30 days</option>\n                  <option value=\"90days\">Last 90 days</option>\n                </select>\n              </div>\n              <span className=\"text-sm text-gray-600\">\n                Showing data for {getDateRangeText(dateRange).toLowerCase()}\n              </span>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-export-analytics\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-filter-analytics\">\n                <Filter className=\"w-4 h-4 mr-2\" />\n                Filter\n              </Button>\n            </div>\n          </div>\n\n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {statsCards.map((stat, index) => {\n              const Icon = stat.icon;\n              return (\n                <Card key={index} className=\"bg-white border border-gray-200\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center\">\n                      <div className={`w-12 h-12 ${stat.iconBg} rounded-lg flex items-center justify-center`}>\n                        <Icon className={`${stat.iconColor} text-xl w-6 h-6`} />\n                      </div>\n                      <div className=\"ml-4\">\n                        <p className=\"text-sm font-medium text-gray-600\">{stat.title}</p>\n                        <p className=\"text-2xl font-bold text-gray-900\" data-testid={`stat-${stat.title.toLowerCase().replace(' ', '-')}`}>\n                          {stat.value}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"mt-4 flex items-center text-sm\">\n                      <TrendingUp className=\"w-4 h-4 text-whatsapp-500 mr-1\" />\n                      <span className=\"text-whatsapp-500 font-medium\">{stat.change}</span>\n                      <span className=\"text-gray-600 ml-1\">\n                        {stat.changeLabel || \"vs previous period\"}\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Campaign Performance */}\n            <Card>\n              <div className=\"px-6 py-4 border-b border-gray-200\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">Campaign Performance</h3>\n              </div>\n              <CardContent className=\"p-6\">\n                {isLoading ? (\n                  <div className=\"animate-pulse space-y-4\">\n                    {[...Array(5)].map((_, i) => (\n                      <div key={i} className=\"flex items-center space-x-4\">\n                        <div className=\"w-8 h-8 bg-gray-200 rounded\"></div>\n                        <div className=\"flex-1 space-y-2\">\n                          <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                          <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : campaigns.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {campaigns.slice(0, 5).map((campaign: any) => {\n                      const deliveryRate = campaign.totalRecipients > 0 \n                        ? Math.round((campaign.messagesDelivered / campaign.totalRecipients) * 100)\n                        : 0;\n                      \n                      return (\n                        <div key={campaign.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\" data-testid={`campaign-analytics-${campaign.id}`}>\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-medium text-gray-900\">{campaign.name}</h4>\n                            <div className=\"flex items-center space-x-4 text-sm text-gray-600 mt-1\">\n                              <span>{campaign.messagesSent || 0} sent</span>\n                              <span>{campaign.messagesDelivered || 0} delivered</span>\n                              <span className=\"text-whatsapp-600 font-medium\">{deliveryRate}% rate</span>\n                            </div>\n                          </div>\n                          <div className=\"w-16 h-16 relative\">\n                            <svg className=\"w-16 h-16 transform -rotate-90\" viewBox=\"0 0 36 36\">\n                              <path\n                                className=\"text-gray-200\"\n                                stroke=\"currentColor\"\n                                strokeWidth=\"2\"\n                                fill=\"none\"\n                                d=\"M18 2.0845\n                                  a 15.9155 15.9155 0 0 1 0 31.831\n                                  a 15.9155 15.9155 0 0 1 0 -31.831\"\n                              />\n                              <path\n                                className=\"text-whatsapp-500\"\n                                stroke=\"currentColor\"\n                                strokeWidth=\"2\"\n                                strokeDasharray={`${deliveryRate}, 100`}\n                                strokeLinecap=\"round\"\n                                fill=\"none\"\n                                d=\"M18 2.0845\n                                  a 15.9155 15.9155 0 0 1 0 31.831\n                                  a 15.9155 15.9155 0 0 1 0 -31.831\"\n                              />\n                            </svg>\n                            <div className=\"absolute inset-0 flex items-center justify-center\">\n                              <span className=\"text-xs font-medium text-gray-700\">{deliveryRate}%</span>\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <BarChart3 className=\"w-12 h-12 text-gray-300 mx-auto mb-3\" />\n                    <p className=\"text-gray-500 text-sm\">No campaign data available</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Session Status */}\n            <Card>\n              <div className=\"px-6 py-4 border-b border-gray-200\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">Session Status</h3>\n              </div>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  {sessions.length > 0 ? (\n                    sessions.map((session: any) => (\n                      <div key={session.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\" data-testid={`session-status-${session.id}`}>\n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`w-3 h-3 rounded-full ${\n                            session.status === 'connected' ? 'bg-whatsapp-500' : \n                            session.status === 'connecting' ? 'bg-blue-500' :\n                            session.status === 'qr_pending' ? 'bg-orange-500' : 'bg-red-500'\n                          }`}></div>\n                          <div>\n                            <p className=\"font-medium text-gray-900\">\n                              {session.phone || session.sessionId}\n                            </p>\n                            <p className=\"text-sm text-gray-500\">\n                              {session.status === 'connected' ? 'Online' : \n                               session.status === 'connecting' ? 'Connecting...' :\n                               session.status === 'qr_pending' ? 'Waiting for QR scan' : 'Offline'}\n                            </p>\n                          </div>\n                        </div>\n                        {session.lastSeen && (\n                          <span className=\"text-xs text-gray-500\">\n                            {format(new Date(session.lastSeen), 'MMM d, h:mm a')}\n                          </span>\n                        )}\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <MessageCircle className=\"w-12 h-12 text-gray-300 mx-auto mb-3\" />\n                      <p className=\"text-gray-500 text-sm\">No sessions available</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Message Timeline */}\n          <Card className=\"mt-6\">\n            <div className=\"px-6 py-4 border-b border-gray-200\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">Message Timeline</h3>\n            </div>\n            <CardContent className=\"p-6\">\n              <div className=\"space-y-4\">\n                {/* Sample timeline data - in real app this would come from analytics API */}\n                <div className=\"flex items-center space-x-4 p-3 bg-gray-50 rounded-lg\">\n                  <div className=\"w-10 h-10 bg-whatsapp-100 rounded-lg flex items-center justify-center\">\n                    <MessageSquare className=\"w-5 h-5 text-whatsapp-600\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-gray-900\">Campaign \"Black Friday Sale\" started</p>\n                    <p className=\"text-sm text-gray-500\">2,450 messages queued for delivery</p>\n                  </div>\n                  <span className=\"text-sm text-gray-500\">2 hours ago</span>\n                </div>\n                \n                <div className=\"flex items-center space-x-4 p-3 bg-gray-50 rounded-lg\">\n                  <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <CheckCheck className=\"w-5 h-5 text-blue-600\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-gray-900\">High delivery rate achieved</p>\n                    <p className=\"text-sm text-gray-500\">98.2% of messages delivered successfully</p>\n                  </div>\n                  <span className=\"text-sm text-gray-500\">3 hours ago</span>\n                </div>\n                \n                <div className=\"flex items-center space-x-4 p-3 bg-gray-50 rounded-lg\">\n                  <div className=\"w-10 h-10 bg-orange-100 rounded-lg flex items-center justify-center\">\n                    <Users className=\"w-5 h-5 text-orange-600\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-gray-900\">New contacts imported</p>\n                    <p className=\"text-sm text-gray-500\">156 contacts added from CSV import</p>\n                  </div>\n                  <span className=\"text-sm text-gray-500\">1 day ago</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Key Metrics Summary */}\n          <Card className=\"mt-6\">\n            <div className=\"px-6 py-4 border-b border-gray-200\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">Key Metrics Summary</h3>\n            </div>\n            <CardContent className=\"p-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-whatsapp-600 mb-2\">\n                    {analytics?.deliveryRate || '0'}%\n                  </div>\n                  <p className=\"text-sm text-gray-600\">Average Delivery Rate</p>\n                  <p className=\"text-xs text-gray-500 mt-1\">Industry average: 95%</p>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-blue-600 mb-2\">\n                    {analytics?.responseRate || '0'}%\n                  </div>\n                  <p className=\"text-sm text-gray-600\">Response Rate</p>\n                  <p className=\"text-xs text-gray-500 mt-1\">Industry average: 8%</p>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-purple-600 mb-2\">\n                    {campaigns.filter((c: any) => c.status === 'completed').length}\n                  </div>\n                  <p className=\"text-sm text-gray-600\">Completed Campaigns</p>\n                  <p className=\"text-xs text-gray-500 mt-1\">This period</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16733},"client/src/pages/auto-reply.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/layout/header\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AutoReplyModal } from \"@/components/modals/auto-reply-modal\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { \n  Plus, \n  Bot, \n  Edit, \n  Trash, \n  Power, \n  Clock,\n  MessageCircle,\n  Settings,\n  MoreHorizontal\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Switch } from \"@/components/ui/switch\";\n\ninterface AutoReplyRule {\n  id: string;\n  name: string;\n  keywords: string[];\n  triggerType: string;\n  response: string;\n  delay: number;\n  isActive: boolean;\n  businessHoursOnly: boolean;\n  businessHoursStart: string;\n  businessHoursEnd: string;\n  sessionId: string;\n  createdAt: string;\n}\n\nexport default function AutoReply() {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingRule, setEditingRule] = useState<AutoReplyRule | null>(null);\n  const { toast } = useToast();\n  const { lastMessage } = useWebSocket();\n\n  const { data: rules = [], isLoading, refetch } = useQuery({\n    queryKey: [\"/api/auto-reply-rules\"],\n  });\n\n  const { data: sessions = [] } = useQuery({\n    queryKey: [\"/api/sessions\"],\n  });\n\n  const deleteRuleMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/auto-reply-rules/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auto-reply-rules\"] });\n      toast({ title: \"Auto-reply rule deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete auto-reply rule\", variant: \"destructive\" });\n    },\n  });\n\n  const toggleRuleMutation = useMutation({\n    mutationFn: ({ id, isActive }: { id: string; isActive: boolean }) => \n      apiRequest(\"PUT\", `/api/auto-reply-rules/${id}`, { isActive }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auto-reply-rules\"] });\n      toast({ title: \"Auto-reply rule updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update auto-reply rule\", variant: \"destructive\" });\n    },\n  });\n\n  useEffect(() => {\n    if (lastMessage?.type?.includes('auto_reply_rule')) {\n      refetch();\n    }\n  }, [lastMessage, refetch]);\n\n  const connectedSessions = sessions.filter((s: any) => s.status === 'connected');\n\n  const handleEdit = (rule: AutoReplyRule) => {\n    setEditingRule(rule);\n    setIsModalOpen(true);\n  };\n\n  const handleNewRule = () => {\n    setEditingRule(null);\n    setIsModalOpen(true);\n  };\n\n  const getTriggerTypeDisplay = (type: string) => {\n    switch (type) {\n      case 'contains': return 'Contains keywords';\n      case 'exact': return 'Exact match';\n      case 'starts_with': return 'Starts with';\n      case 'ends_with': return 'Ends with';\n      case 'any': return 'Any message';\n      case 'first_message': return 'First message';\n      default: return type;\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar connectedSessions={connectedSessions} />\n      \n      <div className=\"flex-1 overflow-hidden\">\n        <Header \n          title=\"Auto-Reply\" \n          subtitle=\"Configure automated responses for incoming messages\"\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <Bot className=\"w-6 h-6 text-blue-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Total Rules</p>\n                    <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-total-rules\">\n                      {rules.length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-whatsapp-100 rounded-lg flex items-center justify-center\">\n                    <Power className=\"w-6 h-6 text-whatsapp-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Active Rules</p>\n                    <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-active-rules\">\n                      {rules.filter((rule: AutoReplyRule) => rule.isActive).length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                    <MessageCircle className=\"w-6 h-6 text-orange-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Sessions</p>\n                    <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-connected-sessions\">\n                      {connectedSessions.length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Header Actions */}\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-xl font-semibold text-gray-900\">Auto-Reply Rules</h2>\n            <Button\n              onClick={handleNewRule}\n              className=\"bg-whatsapp-500 text-white hover:bg-whatsapp-600\"\n              data-testid=\"button-add-rule\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Rule\n            </Button>\n          </div>\n\n          {/* Rules List */}\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(3)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-between\">\n                        <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\n                        <div className=\"h-6 w-16 bg-gray-200 rounded\"></div>\n                      </div>\n                      <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-3/4\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : rules.length > 0 ? (\n            <div className=\"space-y-4\">\n              {rules.map((rule: AutoReplyRule) => (\n                <Card key={rule.id} className=\"border border-gray-200\" data-testid={`rule-card-${rule.id}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3 mb-2\">\n                          <h3 className=\"font-semibold text-gray-900\">{rule.name}</h3>\n                          <Badge\n                            variant={rule.isActive ? \"default\" : \"secondary\"}\n                            className={rule.isActive ? \"bg-whatsapp-100 text-whatsapp-800\" : \"\"}\n                          >\n                            {rule.isActive ? \"Active\" : \"Inactive\"}\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm mb-4\">\n                          <div>\n                            <span className=\"text-gray-500\">Trigger:</span>\n                            <span className=\"ml-2 text-gray-900\">\n                              {getTriggerTypeDisplay(rule.triggerType)}\n                            </span>\n                          </div>\n                          {rule.keywords.length > 0 && (\n                            <div>\n                              <span className=\"text-gray-500\">Keywords:</span>\n                              <span className=\"ml-2 text-gray-900\">\n                                {rule.keywords.join(\", \")}\n                              </span>\n                            </div>\n                          )}\n                          {rule.delay > 0 && (\n                            <div>\n                              <span className=\"text-gray-500\">Delay:</span>\n                              <span className=\"ml-2 text-gray-900\">\n                                {rule.delay} seconds\n                              </span>\n                            </div>\n                          )}\n                          {rule.businessHoursOnly && (\n                            <div>\n                              <span className=\"text-gray-500\">Business Hours:</span>\n                              <span className=\"ml-2 text-gray-900\">\n                                {rule.businessHoursStart} - {rule.businessHoursEnd}\n                              </span>\n                            </div>\n                          )}\n                        </div>\n                        \n                        <div>\n                          <span className=\"text-gray-500 text-sm\">Response:</span>\n                          <p className=\"mt-1 text-gray-900 text-sm bg-gray-50 p-3 rounded-lg\">\n                            {rule.response}\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2 ml-4\">\n                        <Switch\n                          checked={rule.isActive}\n                          onCheckedChange={(checked) => \n                            toggleRuleMutation.mutate({ id: rule.id, isActive: checked })\n                          }\n                          data-testid={`toggle-${rule.id}`}\n                        />\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"sm\" data-testid={`menu-${rule.id}`}>\n                              <MoreHorizontal className=\"w-4 h-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem \n                              onClick={() => handleEdit(rule)}\n                              data-testid={`edit-${rule.id}`}\n                            >\n                              <Edit className=\"w-4 h-4 mr-2\" />\n                              Edit\n                            </DropdownMenuItem>\n                            <DropdownMenuItem \n                              className=\"text-red-600\"\n                              onClick={() => deleteRuleMutation.mutate(rule.id)}\n                              data-testid={`delete-${rule.id}`}\n                            >\n                              <Trash className=\"w-4 h-4 mr-2\" />\n                              Delete\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"text-center py-12\">\n                <Bot className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No auto-reply rules</h3>\n                <p className=\"text-gray-500 mb-6\">\n                  Create your first auto-reply rule to start responding to messages automatically.\n                </p>\n                <Button\n                  onClick={handleNewRule}\n                  className=\"bg-whatsapp-500 text-white hover:bg-whatsapp-600\"\n                  data-testid=\"button-create-first-rule\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create Auto-Reply Rule\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Help Section */}\n          {rules.length > 0 && (\n            <Card className=\"mt-8\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                    <Settings className=\"w-5 h-5 text-blue-600\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 mb-2\">How Auto-Reply Works</h3>\n                    <ul className=\"text-sm text-gray-600 space-y-1\">\n                      <li>• Rules are checked in the order they appear</li>\n                      <li>• Only the first matching rule will trigger</li>\n                      <li>• Business hours rules only trigger during specified times</li>\n                      <li>• Delays are applied before sending the response</li>\n                      <li>• Keywords are case-insensitive</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </main>\n      </div>\n\n      <AutoReplyModal \n        isOpen={isModalOpen} \n        onClose={() => {\n          setIsModalOpen(false);\n          setEditingRule(null);\n        }}\n        editingRule={editingRule}\n      />\n    </div>\n  );\n}\n","size_bytes":14360},"client/src/pages/campaigns.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/layout/header\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { BulkMessageModal } from \"@/components/modals/bulk-message-modal\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { \n  Plus, \n  Search, \n  Eye, \n  Copy, \n  Edit, \n  Trash, \n  Pause, \n  Play,\n  MoreHorizontal,\n  Calendar,\n  Users,\n  MessageSquare\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport default function Campaigns() {\n  const [isBulkModalOpen, setIsBulkModalOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n  const { lastMessage } = useWebSocket();\n\n  const { data: campaigns = [], isLoading, refetch } = useQuery({\n    queryKey: [\"/api/campaigns\"],\n  });\n\n  const { data: sessions = [] } = useQuery({\n    queryKey: [\"/api/sessions\"],\n  });\n\n  const deleteCampaignMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/campaigns/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\"] });\n      toast({ title: \"Campaign deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete campaign\", variant: \"destructive\" });\n    },\n  });\n\n  const pauseCampaignMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"POST\", `/api/campaigns/${id}/pause`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\"] });\n      toast({ title: \"Campaign paused\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to pause campaign\", variant: \"destructive\" });\n    },\n  });\n\n  useEffect(() => {\n    if (lastMessage?.type?.includes('campaign')) {\n      refetch();\n    }\n  }, [lastMessage, refetch]);\n\n  const connectedSessions = sessions.filter((s: any) => s.status === 'connected');\n\n  const filteredCampaigns = campaigns.filter((campaign: any) =>\n    campaign.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-whatsapp-100 text-whatsapp-800';\n      case 'sending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'scheduled':\n        return 'bg-blue-100 text-blue-800';\n      case 'paused':\n        return 'bg-gray-100 text-gray-800';\n      case 'draft':\n        return 'bg-purple-100 text-purple-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar connectedSessions={connectedSessions} />\n      \n      <div className=\"flex-1 overflow-hidden\">\n        <Header \n          title=\"Campaigns\" \n          subtitle=\"Manage your bulk messaging campaigns\"\n          onNewCampaign={() => setIsBulkModalOpen(true)}\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* Search and Filters */}\n          <div className=\"mb-6 flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative w-80\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  placeholder=\"Search campaigns...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-campaigns\"\n                />\n              </div>\n            </div>\n            <Button\n              onClick={() => setIsBulkModalOpen(true)}\n              className=\"bg-whatsapp-500 text-white hover:bg-whatsapp-600\"\n              data-testid=\"button-new-campaign\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Campaign\n            </Button>\n          </div>\n\n          {/* Campaigns Grid */}\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"h-4 bg-gray-200 rounded mb-4\"></div>\n                    <div className=\"h-8 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded mb-4\"></div>\n                    <div className=\"flex justify-between\">\n                      <div className=\"h-6 w-16 bg-gray-200 rounded\"></div>\n                      <div className=\"h-6 w-6 bg-gray-200 rounded\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : filteredCampaigns.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredCampaigns.map((campaign: any) => (\n                <Card key={campaign.id} className=\"hover:shadow-md transition-shadow\" data-testid={`campaign-card-${campaign.id}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-gray-900 mb-1\">{campaign.name}</h3>\n                        <p className=\"text-sm text-gray-500\">\n                          {new Date(campaign.createdAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\" data-testid={`menu-${campaign.id}`}>\n                            <MoreHorizontal className=\"w-4 h-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem data-testid={`view-${campaign.id}`}>\n                            <Eye className=\"w-4 h-4 mr-2\" />\n                            View Details\n                          </DropdownMenuItem>\n                          <DropdownMenuItem data-testid={`copy-${campaign.id}`}>\n                            <Copy className=\"w-4 h-4 mr-2\" />\n                            Duplicate\n                          </DropdownMenuItem>\n                          {campaign.status === 'sending' && (\n                            <DropdownMenuItem \n                              onClick={() => pauseCampaignMutation.mutate(campaign.id)}\n                              data-testid={`pause-${campaign.id}`}\n                            >\n                              <Pause className=\"w-4 h-4 mr-2\" />\n                              Pause\n                            </DropdownMenuItem>\n                          )}\n                          <DropdownMenuItem data-testid={`edit-${campaign.id}`}>\n                            <Edit className=\"w-4 h-4 mr-2\" />\n                            Edit\n                          </DropdownMenuItem>\n                          <DropdownMenuItem \n                            className=\"text-red-600\"\n                            onClick={() => deleteCampaignMutation.mutate(campaign.id)}\n                            data-testid={`delete-${campaign.id}`}\n                          >\n                            <Trash className=\"w-4 h-4 mr-2\" />\n                            Delete\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </div>\n\n                    <Badge className={getStatusColor(campaign.status)} data-testid={`status-${campaign.id}`}>\n                      {campaign.status.charAt(0).toUpperCase() + campaign.status.slice(1)}\n                    </Badge>\n\n                    <div className=\"mt-4 space-y-2\">\n                      <div className=\"flex items-center text-sm text-gray-600\">\n                        <Users className=\"w-4 h-4 mr-2\" />\n                        <span>{campaign.totalRecipients || 0} recipients</span>\n                      </div>\n                      <div className=\"flex items-center text-sm text-gray-600\">\n                        <MessageSquare className=\"w-4 h-4 mr-2\" />\n                        <span>{campaign.messagesSent || 0} sent</span>\n                      </div>\n                      {campaign.scheduledAt && (\n                        <div className=\"flex items-center text-sm text-gray-600\">\n                          <Calendar className=\"w-4 h-4 mr-2\" />\n                          <span>\n                            {new Date(campaign.scheduledAt).toLocaleDateString()} at{' '}\n                            {new Date(campaign.scheduledAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                          </span>\n                        </div>\n                      )}\n                    </div>\n\n                    {campaign.status === 'sending' && (\n                      <div className=\"mt-4\">\n                        <div className=\"flex justify-between text-sm text-gray-600 mb-1\">\n                          <span>Progress</span>\n                          <span>\n                            {Math.round(((campaign.messagesSent || 0) / (campaign.totalRecipients || 1)) * 100)}%\n                          </span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                          <div \n                            className=\"bg-whatsapp-500 h-2 rounded-full transition-all duration-300\"\n                            style={{ \n                              width: `${Math.min(((campaign.messagesSent || 0) / (campaign.totalRecipients || 1)) * 100, 100)}%` \n                            }}\n                          ></div>\n                        </div>\n                      </div>\n                    )}\n\n                    <div className=\"mt-4 pt-4 border-t border-gray-100\">\n                      <p className=\"text-sm text-gray-600 line-clamp-2\">\n                        {campaign.message}\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <MessageSquare className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No campaigns found</h3>\n              <p className=\"text-gray-500 mb-6\">\n                {searchTerm ? \"No campaigns match your search criteria.\" : \"Get started by creating your first campaign.\"}\n              </p>\n              <Button\n                onClick={() => setIsBulkModalOpen(true)}\n                className=\"bg-whatsapp-500 text-white hover:bg-whatsapp-600\"\n                data-testid=\"button-create-first-campaign\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Campaign\n              </Button>\n            </div>\n          )}\n        </main>\n      </div>\n\n      <BulkMessageModal \n        isOpen={isBulkModalOpen} \n        onClose={() => setIsBulkModalOpen(false)} \n      />\n    </div>\n  );\n}\n","size_bytes":11687},"client/src/pages/contacts.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/layout/header\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ImportContactsModal } from \"@/components/modals/import-contacts-modal\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { \n  Plus, \n  Search, \n  Upload, \n  Download, \n  Edit, \n  Trash, \n  Phone, \n  Mail, \n  Tag,\n  MoreHorizontal,\n  Users\n} from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\ninterface Contact {\n  id: string;\n  name: string;\n  phone: string;\n  email?: string;\n  groups?: string[];\n  metadata?: any;\n  createdAt: string;\n}\n\nexport default function Contacts() {\n  const [isImportModalOpen, setIsImportModalOpen] = useState(false);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [editingContact, setEditingContact] = useState<Contact | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedGroup, setSelectedGroup] = useState<string>(\"all\");\n  const [formData, setFormData] = useState({\n    name: \"\",\n    phone: \"\",\n    email: \"\",\n    groups: [] as string[],\n  });\n\n  const { toast } = useToast();\n  const { lastMessage } = useWebSocket();\n\n  const { data: contacts = [], isLoading, refetch } = useQuery({\n    queryKey: [\"/api/contacts\"],\n  });\n\n  const { data: sessions = [] } = useQuery({\n    queryKey: [\"/api/sessions\"],\n  });\n\n  const createContactMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/contacts\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts\"] });\n      toast({ title: \"Contact created successfully\" });\n      setIsAddModalOpen(false);\n      resetForm();\n    },\n    onError: () => {\n      toast({ title: \"Failed to create contact\", variant: \"destructive\" });\n    },\n  });\n\n  const updateContactMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: any }) => \n      apiRequest(\"PUT\", `/api/contacts/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts\"] });\n      toast({ title: \"Contact updated successfully\" });\n      setEditingContact(null);\n      resetForm();\n    },\n    onError: () => {\n      toast({ title: \"Failed to update contact\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteContactMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/contacts/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts\"] });\n      toast({ title: \"Contact deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete contact\", variant: \"destructive\" });\n    },\n  });\n\n  useEffect(() => {\n    if (lastMessage?.type?.includes('contact')) {\n      refetch();\n    }\n  }, [lastMessage, refetch]);\n\n  const resetForm = () => {\n    setFormData({ name: \"\", phone: \"\", email: \"\", groups: [] });\n  };\n\n  const handleEdit = (contact: Contact) => {\n    setEditingContact(contact);\n    setFormData({\n      name: contact.name,\n      phone: contact.phone,\n      email: contact.email || \"\",\n      groups: contact.groups || [],\n    });\n    setIsAddModalOpen(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (editingContact) {\n      updateContactMutation.mutate({ id: editingContact.id, data: formData });\n    } else {\n      createContactMutation.mutate(formData);\n    }\n  };\n\n  const handleExport = async () => {\n    try {\n      const response = await fetch('/api/contacts/export');\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'contacts.csv';\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      toast({ title: \"Contacts exported successfully\" });\n    } catch (error) {\n      toast({ title: \"Failed to export contacts\", variant: \"destructive\" });\n    }\n  };\n\n  const connectedSessions = sessions.filter((s: any) => s.status === 'connected');\n\n  // Get unique groups\n  const allGroups = Array.from(\n    new Set(contacts.flatMap((contact: Contact) => contact.groups || []))\n  );\n\n  // Filter contacts\n  const filteredContacts = contacts.filter((contact: Contact) => {\n    const matchesSearch = contact.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         contact.phone.includes(searchTerm) ||\n                         (contact.email && contact.email.toLowerCase().includes(searchTerm.toLowerCase()));\n    \n    const matchesGroup = selectedGroup === \"all\" || \n                        (contact.groups && contact.groups.includes(selectedGroup));\n    \n    return matchesSearch && matchesGroup;\n  });\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar connectedSessions={connectedSessions} />\n      \n      <div className=\"flex-1 overflow-hidden\">\n        <Header \n          title=\"Contacts\" \n          subtitle=\"Manage your contact database\"\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* Controls */}\n          <div className=\"mb-6 flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1 flex items-center space-x-4\">\n              <div className=\"relative w-80\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  placeholder=\"Search contacts...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-contacts\"\n                />\n              </div>\n              \n              <select\n                value={selectedGroup}\n                onChange={(e) => setSelectedGroup(e.target.value)}\n                className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-whatsapp-500 focus:border-whatsapp-500\"\n                data-testid=\"select-group-filter\"\n              >\n                <option value=\"all\">All Groups</option>\n                {allGroups.map((group) => (\n                  <option key={group} value={group}>{group}</option>\n                ))}\n              </select>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={handleExport}\n                data-testid=\"button-export-contacts\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsImportModalOpen(true)}\n                data-testid=\"button-import-contacts\"\n              >\n                <Upload className=\"w-4 h-4 mr-2\" />\n                Import\n              </Button>\n              <Button\n                onClick={() => setIsAddModalOpen(true)}\n                className=\"bg-whatsapp-500 text-white hover:bg-whatsapp-600\"\n                data-testid=\"button-add-contact\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Contact\n              </Button>\n            </div>\n          </div>\n\n          {/* Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <Users className=\"w-6 h-6 text-blue-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Total Contacts</p>\n                    <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-total-contacts\">\n                      {contacts.length.toLocaleString()}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                    <Tag className=\"w-6 h-6 text-purple-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Groups</p>\n                    <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-total-groups\">\n                      {allGroups.length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-whatsapp-100 rounded-lg flex items-center justify-center\">\n                    <Mail className=\"w-6 h-6 text-whatsapp-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">With Email</p>\n                    <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-contacts-with-email\">\n                      {contacts.filter((c: Contact) => c.email).length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Contacts Table */}\n          <Card>\n            <CardContent className=\"p-0\">\n              {isLoading ? (\n                <div className=\"p-6\">\n                  <div className=\"animate-pulse space-y-4\">\n                    {[...Array(5)].map((_, i) => (\n                      <div key={i} className=\"flex items-center space-x-4\">\n                        <div className=\"w-10 h-10 bg-gray-200 rounded-full\"></div>\n                        <div className=\"flex-1 space-y-2\">\n                          <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\n                          <div className=\"h-3 bg-gray-200 rounded w-1/6\"></div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ) : filteredContacts.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"min-w-full divide-y divide-gray-200\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Contact\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Phone\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Email\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Groups\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Added\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Actions\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {filteredContacts.map((contact: Contact) => (\n                        <tr key={contact.id} data-testid={`contact-row-${contact.id}`}>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center\">\n                              <div className=\"w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center\">\n                                <span className=\"text-sm font-medium text-gray-600\">\n                                  {contact.name.charAt(0).toUpperCase()}\n                                </span>\n                              </div>\n                              <div className=\"ml-4\">\n                                <div className=\"text-sm font-medium text-gray-900\">{contact.name}</div>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center text-sm text-gray-900\">\n                              <Phone className=\"w-4 h-4 mr-2 text-gray-400\" />\n                              {contact.phone}\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            {contact.email ? (\n                              <div className=\"flex items-center text-sm text-gray-900\">\n                                <Mail className=\"w-4 h-4 mr-2 text-gray-400\" />\n                                {contact.email}\n                              </div>\n                            ) : (\n                              <span className=\"text-sm text-gray-400\">-</span>\n                            )}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex flex-wrap gap-1\">\n                              {contact.groups && contact.groups.length > 0 ? (\n                                contact.groups.map((group) => (\n                                  <Badge key={group} variant=\"secondary\" className=\"text-xs\">\n                                    {group}\n                                  </Badge>\n                                ))\n                              ) : (\n                                <span className=\"text-sm text-gray-400\">No groups</span>\n                              )}\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                            {new Date(contact.createdAt).toLocaleDateString()}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"sm\" data-testid={`menu-${contact.id}`}>\n                                  <MoreHorizontal className=\"w-4 h-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem \n                                  onClick={() => handleEdit(contact)}\n                                  data-testid={`edit-${contact.id}`}\n                                >\n                                  <Edit className=\"w-4 h-4 mr-2\" />\n                                  Edit\n                                </DropdownMenuItem>\n                                <DropdownMenuItem \n                                  className=\"text-red-600\"\n                                  onClick={() => deleteContactMutation.mutate(contact.id)}\n                                  data-testid={`delete-${contact.id}`}\n                                >\n                                  <Trash className=\"w-4 h-4 mr-2\" />\n                                  Delete\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <Users className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No contacts found</h3>\n                  <p className=\"text-gray-500 mb-6\">\n                    {searchTerm || selectedGroup !== \"all\" \n                      ? \"No contacts match your search criteria.\" \n                      : \"Get started by adding your first contact.\"}\n                  </p>\n                  <Button\n                    onClick={() => setIsAddModalOpen(true)}\n                    className=\"bg-whatsapp-500 text-white hover:bg-whatsapp-600\"\n                    data-testid=\"button-add-first-contact\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Contact\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n\n      {/* Add/Edit Contact Modal */}\n      <Dialog open={isAddModalOpen} onOpenChange={setIsAddModalOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingContact ? \"Edit Contact\" : \"Add New Contact\"}\n            </DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"name\">Name *</Label>\n              <Input\n                id=\"name\"\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                placeholder=\"Enter contact name\"\n                required\n                data-testid=\"input-contact-name\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"phone\">Phone *</Label>\n              <Input\n                id=\"phone\"\n                value={formData.phone}\n                onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                placeholder=\"Enter phone number\"\n                required\n                data-testid=\"input-contact-phone\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                placeholder=\"Enter email address\"\n                data-testid=\"input-contact-email\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"groups\">Groups (comma separated)</Label>\n              <Input\n                id=\"groups\"\n                value={formData.groups.join(\", \")}\n                onChange={(e) => setFormData({ \n                  ...formData, \n                  groups: e.target.value.split(\",\").map(g => g.trim()).filter(g => g) \n                })}\n                placeholder=\"VIP, Newsletter, Customers\"\n                data-testid=\"input-contact-groups\"\n              />\n            </div>\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => {\n                  setIsAddModalOpen(false);\n                  setEditingContact(null);\n                  resetForm();\n                }}\n                data-testid=\"button-cancel-contact\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"bg-whatsapp-500 text-white hover:bg-whatsapp-600\"\n                disabled={createContactMutation.isPending || updateContactMutation.isPending}\n                data-testid=\"button-save-contact\"\n              >\n                {editingContact ? \"Update\" : \"Add\"} Contact\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      <ImportContactsModal \n        isOpen={isImportModalOpen} \n        onClose={() => setIsImportModalOpen(false)} \n      />\n    </div>\n  );\n}\n","size_bytes":21007},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/layout/header\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BulkMessageModal } from \"@/components/modals/bulk-message-modal\";\nimport { QRCodeModal } from \"@/components/modals/qr-code-modal\";\nimport { ImportContactsModal } from \"@/components/modals/import-contacts-modal\";\nimport { AutoReplyModal } from \"@/components/modals/auto-reply-modal\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { \n  MessageSquare, \n  CheckCheck, \n  MessageCircle, \n  Users, \n  QrCode, \n  Upload, \n  Bot,\n  Send,\n  Eye,\n  Copy,\n  Edit,\n  Trash,\n  Pause,\n  Plus\n} from \"lucide-react\";\n\nexport default function Dashboard() {\n  const [isBulkModalOpen, setIsBulkModalOpen] = useState(false);\n  const [isQRModalOpen, setIsQRModalOpen] = useState(false);\n  const [isImportModalOpen, setIsImportModalOpen] = useState(false);\n  const [isAutoReplyModalOpen, setIsAutoReplyModalOpen] = useState(false);\n\n  const { lastMessage } = useWebSocket();\n\n  const { data: analytics, refetch: refetchAnalytics } = useQuery({\n    queryKey: [\"/api/analytics/dashboard\"],\n  });\n\n  const { data: sessions = [], refetch: refetchSessions } = useQuery({\n    queryKey: [\"/api/sessions\"],\n  });\n\n  // Handle real-time updates\n  useEffect(() => {\n    if (lastMessage) {\n      switch (lastMessage.type) {\n        case 'session_created':\n        case 'session_updated':\n        case 'session_deleted':\n          refetchSessions();\n          break;\n        case 'campaign_created':\n        case 'campaign_updated':\n        case 'campaign_deleted':\n          refetchAnalytics();\n          break;\n      }\n    }\n  }, [lastMessage, refetchSessions, refetchAnalytics]);\n\n  const connectedSessions = sessions.filter((s: any) => s.status === 'connected');\n\n  const statsCards = [\n    {\n      title: \"Messages Sent\",\n      value: analytics?.messagesSent?.toLocaleString() || \"0\",\n      change: \"+12.5%\",\n      changeType: \"positive\",\n      icon: MessageSquare,\n      iconBg: \"bg-blue-100\",\n      iconColor: \"text-blue-600\"\n    },\n    {\n      title: \"Delivered\",\n      value: analytics?.messagesDelivered?.toLocaleString() || \"0\",\n      change: `${analytics?.deliveryRate || 0}%`,\n      changeLabel: \"delivery rate\",\n      icon: CheckCheck,\n      iconBg: \"bg-whatsapp-100\",\n      iconColor: \"text-whatsapp-600\"\n    },\n    {\n      title: \"Responses\",\n      value: analytics?.messagesResponded?.toLocaleString() || \"0\",\n      change: `${analytics?.responseRate || 0}%`,\n      changeLabel: \"response rate\",\n      icon: MessageCircle,\n      iconBg: \"bg-purple-100\",\n      iconColor: \"text-purple-600\"\n    },\n    {\n      title: \"Active Contacts\",\n      value: analytics?.activeContacts?.toLocaleString() || \"0\",\n      change: \"+156\",\n      changeLabel: \"this week\",\n      icon: Users,\n      iconBg: \"bg-orange-100\",\n      iconColor: \"text-orange-600\"\n    }\n  ];\n\n  const quickActions = [\n    {\n      title: \"Bulk Message\",\n      description: \"Send personalized messages to multiple contacts\",\n      icon: Send,\n      iconBg: \"bg-blue-100\",\n      iconColor: \"text-blue-600\",\n      buttonText: \"Start Campaign\",\n      buttonBg: \"bg-blue-50\",\n      buttonColor: \"text-blue-700\",\n      buttonHover: \"hover:bg-blue-100\",\n      onClick: () => setIsBulkModalOpen(true),\n      testId: \"card-bulk-message\"\n    },\n    {\n      title: \"Connect Device\",\n      description: \"Scan QR code to connect new WhatsApp session\",\n      icon: QrCode,\n      iconBg: \"bg-whatsapp-100\",\n      iconColor: \"text-whatsapp-600\",\n      buttonText: \"Scan QR Code\",\n      buttonBg: \"bg-whatsapp-50\",\n      buttonColor: \"text-whatsapp-700\",\n      buttonHover: \"hover:bg-whatsapp-100\",\n      onClick: () => setIsQRModalOpen(true),\n      testId: \"card-qr-scan\"\n    },\n    {\n      title: \"Import Contacts\",\n      description: \"Upload CSV file to import contact lists\",\n      icon: Upload,\n      iconBg: \"bg-purple-100\",\n      iconColor: \"text-purple-600\",\n      buttonText: \"Upload CSV\",\n      buttonBg: \"bg-purple-50\",\n      buttonColor: \"text-purple-700\",\n      buttonHover: \"hover:bg-purple-100\",\n      onClick: () => setIsImportModalOpen(true),\n      testId: \"card-import-contacts\"\n    },\n    {\n      title: \"Auto-Reply\",\n      description: \"Set up automated responses with keywords\",\n      icon: Bot,\n      iconBg: \"bg-orange-100\",\n      iconColor: \"text-orange-600\",\n      buttonText: \"Configure\",\n      buttonBg: \"bg-orange-50\",\n      buttonColor: \"text-orange-700\",\n      buttonHover: \"hover:bg-orange-100\",\n      onClick: () => setIsAutoReplyModalOpen(true),\n      testId: \"card-auto-reply\"\n    }\n  ];\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar connectedSessions={connectedSessions} />\n      \n      <div className=\"flex-1 overflow-hidden\">\n        <Header \n          title=\"Dashboard\" \n          subtitle=\"Monitor your WhatsApp automation campaigns\"\n          onNewCampaign={() => setIsBulkModalOpen(true)}\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {statsCards.map((stat, index) => {\n              const Icon = stat.icon;\n              return (\n                <Card key={index} className=\"bg-white border border-gray-200\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center\">\n                      <div className={`w-12 h-12 ${stat.iconBg} rounded-lg flex items-center justify-center`}>\n                        <Icon className={`${stat.iconColor} text-xl w-6 h-6`} />\n                      </div>\n                      <div className=\"ml-4\">\n                        <p className=\"text-sm font-medium text-gray-600\">{stat.title}</p>\n                        <p className=\"text-2xl font-bold text-gray-900\" data-testid={`stat-${stat.title.toLowerCase().replace(' ', '-')}`}>\n                          {stat.value}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"mt-4 flex items-center text-sm\">\n                      <span className=\"text-whatsapp-500 font-medium\">{stat.change}</span>\n                      <span className=\"text-gray-600 ml-1\">\n                        {stat.changeLabel || \"from last month\"}\n                      </span>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n\n          {/* Two Column Layout */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Quick Actions */}\n            <div className=\"lg:col-span-2\">\n              <Card className=\"bg-white border border-gray-200\">\n                <div className=\"px-6 py-4 border-b border-gray-200\">\n                  <h3 className=\"text-lg font-semibold text-gray-900\">Quick Actions</h3>\n                </div>\n                <CardContent className=\"p-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {quickActions.map((action, index) => {\n                      const Icon = action.icon;\n                      return (\n                        <div \n                          key={index}\n                          className=\"border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow cursor-pointer\"\n                          data-testid={action.testId}\n                        >\n                          <div className=\"flex items-center mb-3\">\n                            <div className={`w-10 h-10 ${action.iconBg} rounded-lg flex items-center justify-center`}>\n                              <Icon className={`${action.iconColor} w-5 h-5`} />\n                            </div>\n                            <h4 className=\"ml-3 font-semibold text-gray-900\">{action.title}</h4>\n                          </div>\n                          <p className=\"text-sm text-gray-600 mb-3\">{action.description}</p>\n                          <Button\n                            className={`w-full ${action.buttonBg} ${action.buttonColor} ${action.buttonHover} border-0`}\n                            variant=\"outline\"\n                            onClick={action.onClick}\n                            data-testid={`button-${action.title.toLowerCase().replace(' ', '-')}`}\n                          >\n                            {action.buttonText}\n                          </Button>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Active Sessions */}\n            <div>\n              <Card className=\"bg-white border border-gray-200\">\n                <div className=\"px-6 py-4 border-b border-gray-200 flex items-center justify-between\">\n                  <h3 className=\"text-lg font-semibold text-gray-900\">Active Sessions</h3>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"text-whatsapp-600 hover:text-whatsapp-700\"\n                    data-testid=\"button-manage-sessions\"\n                  >\n                    Manage All\n                  </Button>\n                </div>\n                <CardContent className=\"p-6 space-y-4\">\n                  {sessions.length > 0 ? (\n                    sessions.slice(0, 3).map((session: any) => (\n                      <div \n                        key={session.id}\n                        className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n                        data-testid={`session-${session.id}`}\n                      >\n                        <div className=\"flex items-center\">\n                          <div className=\"w-10 h-10 bg-whatsapp-500 rounded-full flex items-center justify-center\">\n                            <MessageCircle className=\"text-white w-5 h-5\" />\n                          </div>\n                          <div className=\"ml-3\">\n                            <p className=\"text-sm font-medium text-gray-900\">\n                              {session.phone || session.sessionId}\n                            </p>\n                            <p className={`text-xs ${\n                              session.status === 'connected' ? 'text-whatsapp-600' : 'text-red-500'\n                            }`}>\n                              {session.status === 'connected' ? 'Connected' : 'Disconnected'}\n                            </p>\n                          </div>\n                        </div>\n                        <div className={`w-3 h-3 rounded-full ${\n                          session.status === 'connected' ? 'bg-whatsapp-500' : 'bg-red-500'\n                        }`}></div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-gray-500 text-sm\">No active sessions</p>\n                      <Button\n                        className=\"mt-3 bg-whatsapp-500 text-white hover:bg-whatsapp-600\"\n                        onClick={() => setIsQRModalOpen(true)}\n                        data-testid=\"button-add-session\"\n                      >\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Add New Session\n                      </Button>\n                    </div>\n                  )}\n                  \n                  {sessions.length > 0 && (\n                    <Button\n                      className=\"w-full bg-whatsapp-50 text-whatsapp-700 hover:bg-whatsapp-100 border-0\"\n                      variant=\"outline\"\n                      onClick={() => setIsQRModalOpen(true)}\n                      data-testid=\"button-add-new-session\"\n                    >\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Add New Session\n                    </Button>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Recent Campaigns Table */}\n          <div className=\"mt-8\">\n            <Card className=\"bg-white border border-gray-200\">\n              <div className=\"px-6 py-4 border-b border-gray-200 flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">Recent Campaigns</h3>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-whatsapp-600 hover:text-whatsapp-700\"\n                  data-testid=\"button-view-all-campaigns\"\n                >\n                  View All\n                </Button>\n              </div>\n              <div className=\"overflow-x-auto\">\n                {analytics?.campaigns?.length > 0 ? (\n                  <table className=\"min-w-full divide-y divide-gray-200\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Campaign\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Status\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Recipients\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Sent\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Delivered\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Actions\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {analytics.campaigns.map((campaign: any) => (\n                        <tr key={campaign.id} data-testid={`campaign-row-${campaign.id}`}>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div>\n                              <div className=\"text-sm font-medium text-gray-900\">{campaign.name}</div>\n                              <div className=\"text-sm text-gray-500\">\n                                {new Date(campaign.createdAt).toLocaleDateString()}\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <Badge\n                              variant={\n                                campaign.status === 'completed' ? 'default' :\n                                campaign.status === 'sending' ? 'secondary' :\n                                campaign.status === 'scheduled' ? 'outline' : 'secondary'\n                              }\n                              className={\n                                campaign.status === 'completed' ? 'bg-whatsapp-100 text-whatsapp-800' :\n                                campaign.status === 'sending' ? 'bg-yellow-100 text-yellow-800' :\n                                campaign.status === 'scheduled' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'\n                              }\n                            >\n                              {campaign.status.charAt(0).toUpperCase() + campaign.status.slice(1)}\n                            </Badge>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                            {campaign.totalRecipients?.toLocaleString() || 0}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                            {campaign.messagesSent?.toLocaleString() || 0}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                            {campaign.messagesDelivered?.toLocaleString() || 0}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-${campaign.id}`}>\n                                <Eye className=\"w-4 h-4\" />\n                              </Button>\n                              {campaign.status === 'sending' ? (\n                                <Button variant=\"ghost\" size=\"sm\" data-testid={`button-pause-${campaign.id}`}>\n                                  <Pause className=\"w-4 h-4 text-red-600\" />\n                                </Button>\n                              ) : (\n                                <Button variant=\"ghost\" size=\"sm\" data-testid={`button-copy-${campaign.id}`}>\n                                  <Copy className=\"w-4 h-4 text-blue-600\" />\n                                </Button>\n                              )}\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-gray-500 text-sm\">No campaigns yet</p>\n                    <Button\n                      className=\"mt-3 bg-whatsapp-500 text-white hover:bg-whatsapp-600\"\n                      onClick={() => setIsBulkModalOpen(true)}\n                      data-testid=\"button-create-first-campaign\"\n                    >\n                      Create Your First Campaign\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </Card>\n          </div>\n        </main>\n      </div>\n\n      {/* Modals */}\n      <BulkMessageModal \n        isOpen={isBulkModalOpen} \n        onClose={() => setIsBulkModalOpen(false)} \n      />\n      <QRCodeModal \n        isOpen={isQRModalOpen} \n        onClose={() => setIsQRModalOpen(false)} \n      />\n      <ImportContactsModal \n        isOpen={isImportModalOpen} \n        onClose={() => setIsImportModalOpen(false)} \n      />\n      <AutoReplyModal \n        isOpen={isAutoReplyModalOpen} \n        onClose={() => setIsAutoReplyModalOpen(false)} \n      />\n    </div>\n  );\n}\n","size_bytes":18923},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/scheduler.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/layout/header\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BulkMessageModal } from \"@/components/modals/bulk-message-modal\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { \n  Calendar, \n  Clock, \n  Plus, \n  Play, \n  Pause, \n  Edit, \n  Trash,\n  MessageSquare,\n  Users,\n  AlertCircle,\n  CheckCircle\n} from \"lucide-react\";\nimport { format, isAfter, isBefore, addDays } from \"date-fns\";\n\ninterface Campaign {\n  id: string;\n  name: string;\n  message: string;\n  scheduledAt: string | null;\n  status: string;\n  totalRecipients: number;\n  messagesSent: number;\n  createdAt: string;\n}\n\nexport default function Scheduler() {\n  const [isBulkModalOpen, setIsBulkModalOpen] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const { lastMessage } = useWebSocket();\n\n  const { data: campaigns = [], isLoading, refetch } = useQuery({\n    queryKey: [\"/api/campaigns\"],\n  });\n\n  const { data: sessions = [] } = useQuery({\n    queryKey: [\"/api/sessions\"],\n  });\n\n  const { data: messageQueue = [] } = useQuery({\n    queryKey: [\"/api/analytics/message-queue\"],\n  });\n\n  useEffect(() => {\n    if (lastMessage?.type?.includes('campaign')) {\n      refetch();\n    }\n  }, [lastMessage, refetch]);\n\n  const connectedSessions = sessions.filter((s: any) => s.status === 'connected');\n\n  // Filter scheduled campaigns\n  const scheduledCampaigns = campaigns.filter((campaign: Campaign) => \n    campaign.scheduledAt && campaign.status === 'scheduled'\n  );\n\n  // Filter campaigns by selected date\n  const campaignsForDate = scheduledCampaigns.filter((campaign: Campaign) => {\n    if (!campaign.scheduledAt) return false;\n    const campaignDate = new Date(campaign.scheduledAt);\n    return format(campaignDate, 'yyyy-MM-dd') === format(selectedDate, 'yyyy-MM-dd');\n  });\n\n  // Get upcoming campaigns (next 7 days)\n  const upcomingCampaigns = scheduledCampaigns.filter((campaign: Campaign) => {\n    if (!campaign.scheduledAt) return false;\n    const campaignDate = new Date(campaign.scheduledAt);\n    const now = new Date();\n    const weekFromNow = addDays(now, 7);\n    return isAfter(campaignDate, now) && isBefore(campaignDate, weekFromNow);\n  }).sort((a, b) => new Date(a.scheduledAt!).getTime() - new Date(b.scheduledAt!).getTime());\n\n  // Get pending messages count\n  const pendingMessages = messageQueue.filter((msg: any) => msg.status === 'pending').length;\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'scheduled':\n        return <Clock className=\"w-4 h-4 text-blue-600\" />;\n      case 'sending':\n        return <Play className=\"w-4 h-4 text-whatsapp-600\" />;\n      case 'completed':\n        return <CheckCircle className=\"w-4 h-4 text-green-600\" />;\n      case 'paused':\n        return <Pause className=\"w-4 h-4 text-orange-600\" />;\n      case 'failed':\n        return <AlertCircle className=\"w-4 h-4 text-red-600\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-gray-600\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'scheduled':\n        return 'bg-blue-100 text-blue-800';\n      case 'sending':\n        return 'bg-whatsapp-100 text-whatsapp-800';\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'paused':\n        return 'bg-orange-100 text-orange-800';\n      case 'failed':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar connectedSessions={connectedSessions} />\n      \n      <div className=\"flex-1 overflow-hidden\">\n        <Header \n          title=\"Scheduler\" \n          subtitle=\"Manage and schedule your message campaigns\"\n          onNewCampaign={() => setIsBulkModalOpen(true)}\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <Calendar className=\"w-6 h-6 text-blue-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Scheduled</p>\n                    <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-scheduled-campaigns\">\n                      {scheduledCampaigns.length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-whatsapp-100 rounded-lg flex items-center justify-center\">\n                    <Clock className=\"w-6 h-6 text-whatsapp-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">This Week</p>\n                    <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-upcoming-campaigns\">\n                      {upcomingCampaigns.length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                    <MessageSquare className=\"w-6 h-6 text-orange-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Pending Messages</p>\n                    <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-pending-messages\">\n                      {pendingMessages}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                    <Users className=\"w-6 h-6 text-purple-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Active Sessions</p>\n                    <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-active-sessions\">\n                      {connectedSessions.length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Calendar View */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <div className=\"px-6 py-4 border-b border-gray-200\">\n                  <h3 className=\"text-lg font-semibold text-gray-900\">Campaign Calendar</h3>\n                </div>\n                <CardContent className=\"p-6\">\n                  {/* Simple date picker */}\n                  <div className=\"mb-6\">\n                    <input\n                      type=\"date\"\n                      value={format(selectedDate, 'yyyy-MM-dd')}\n                      onChange={(e) => setSelectedDate(new Date(e.target.value))}\n                      className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-whatsapp-500 focus:border-whatsapp-500\"\n                      data-testid=\"input-date-picker\"\n                    />\n                  </div>\n\n                  {/* Campaigns for selected date */}\n                  <div>\n                    <h4 className=\"font-medium text-gray-900 mb-4\">\n                      Campaigns for {format(selectedDate, 'MMMM d, yyyy')}\n                    </h4>\n                    \n                    {campaignsForDate.length > 0 ? (\n                      <div className=\"space-y-3\">\n                        {campaignsForDate.map((campaign: Campaign) => (\n                          <div \n                            key={campaign.id}\n                            className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n                            data-testid={`scheduled-campaign-${campaign.id}`}\n                          >\n                            <div className=\"flex items-center space-x-3\">\n                              {getStatusIcon(campaign.status)}\n                              <div>\n                                <p className=\"font-medium text-gray-900\">{campaign.name}</p>\n                                <p className=\"text-sm text-gray-500\">\n                                  {format(new Date(campaign.scheduledAt!), 'h:mm a')} • {campaign.totalRecipients} recipients\n                                </p>\n                              </div>\n                            </div>\n                            <Badge className={getStatusColor(campaign.status)}>\n                              {campaign.status.charAt(0).toUpperCase() + campaign.status.slice(1)}\n                            </Badge>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <Calendar className=\"w-12 h-12 text-gray-300 mx-auto mb-3\" />\n                        <p className=\"text-gray-500\">No campaigns scheduled for this date</p>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Upcoming Campaigns */}\n            <div>\n              <Card>\n                <div className=\"px-6 py-4 border-b border-gray-200 flex items-center justify-between\">\n                  <h3 className=\"text-lg font-semibold text-gray-900\">Upcoming Campaigns</h3>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => setIsBulkModalOpen(true)}\n                    className=\"bg-whatsapp-500 text-white hover:bg-whatsapp-600\"\n                    data-testid=\"button-schedule-campaign\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-1\" />\n                    Schedule\n                  </Button>\n                </div>\n                <CardContent className=\"p-6\">\n                  {upcomingCampaigns.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {upcomingCampaigns.map((campaign: Campaign) => (\n                        <div \n                          key={campaign.id}\n                          className=\"border border-gray-200 rounded-lg p-4\"\n                          data-testid={`upcoming-campaign-${campaign.id}`}\n                        >\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <h4 className=\"font-medium text-gray-900\">{campaign.name}</h4>\n                            <Badge className={getStatusColor(campaign.status)}>\n                              {campaign.status}\n                            </Badge>\n                          </div>\n                          \n                          <div className=\"space-y-1 text-sm text-gray-600\">\n                            <div className=\"flex items-center\">\n                              <Calendar className=\"w-4 h-4 mr-2\" />\n                              {format(new Date(campaign.scheduledAt!), 'MMM d, yyyy')}\n                            </div>\n                            <div className=\"flex items-center\">\n                              <Clock className=\"w-4 h-4 mr-2\" />\n                              {format(new Date(campaign.scheduledAt!), 'h:mm a')}\n                            </div>\n                            <div className=\"flex items-center\">\n                              <Users className=\"w-4 h-4 mr-2\" />\n                              {campaign.totalRecipients} recipients\n                            </div>\n                          </div>\n                          \n                          <p className=\"text-sm text-gray-700 mt-3 line-clamp-2\">\n                            {campaign.message}\n                          </p>\n                          \n                          <div className=\"flex items-center justify-end space-x-2 mt-3\">\n                            <Button variant=\"ghost\" size=\"sm\" data-testid={`edit-campaign-${campaign.id}`}>\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                            <Button variant=\"ghost\" size=\"sm\" data-testid={`delete-campaign-${campaign.id}`}>\n                              <Trash className=\"w-4 h-4 text-red-600\" />\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Clock className=\"w-12 h-12 text-gray-300 mx-auto mb-3\" />\n                      <p className=\"text-gray-500 text-sm mb-4\">No upcoming campaigns</p>\n                      <Button\n                        size=\"sm\"\n                        onClick={() => setIsBulkModalOpen(true)}\n                        className=\"bg-whatsapp-500 text-white hover:bg-whatsapp-600\"\n                        data-testid=\"button-create-scheduled-campaign\"\n                      >\n                        <Plus className=\"w-4 h-4 mr-1\" />\n                        Schedule Campaign\n                      </Button>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* All Scheduled Campaigns */}\n          <Card className=\"mt-6\">\n            <div className=\"px-6 py-4 border-b border-gray-200\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">All Scheduled Campaigns</h3>\n            </div>\n            <CardContent className=\"p-0\">\n              {isLoading ? (\n                <div className=\"p-6\">\n                  <div className=\"animate-pulse space-y-4\">\n                    {[...Array(3)].map((_, i) => (\n                      <div key={i} className=\"flex items-center space-x-4\">\n                        <div className=\"w-12 h-12 bg-gray-200 rounded-lg\"></div>\n                        <div className=\"flex-1 space-y-2\">\n                          <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\n                          <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ) : scheduledCampaigns.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"min-w-full divide-y divide-gray-200\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Campaign\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Scheduled Time\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Recipients\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Status\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Actions\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {scheduledCampaigns.map((campaign: Campaign) => (\n                        <tr key={campaign.id} data-testid={`campaign-row-${campaign.id}`}>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div>\n                              <div className=\"text-sm font-medium text-gray-900\">{campaign.name}</div>\n                              <div className=\"text-sm text-gray-500 line-clamp-1\">{campaign.message}</div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"text-sm text-gray-900\">\n                              {campaign.scheduledAt && format(new Date(campaign.scheduledAt), 'MMM d, yyyy')}\n                            </div>\n                            <div className=\"text-sm text-gray-500\">\n                              {campaign.scheduledAt && format(new Date(campaign.scheduledAt), 'h:mm a')}\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                            {campaign.totalRecipients.toLocaleString()}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center space-x-2\">\n                              {getStatusIcon(campaign.status)}\n                              <Badge className={getStatusColor(campaign.status)}>\n                                {campaign.status.charAt(0).toUpperCase() + campaign.status.slice(1)}\n                              </Badge>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Button variant=\"ghost\" size=\"sm\" data-testid={`edit-${campaign.id}`}>\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              <Button variant=\"ghost\" size=\"sm\" data-testid={`delete-${campaign.id}`}>\n                                <Trash className=\"w-4 h-4 text-red-600\" />\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <Calendar className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No scheduled campaigns</h3>\n                  <p className=\"text-gray-500 mb-6\">\n                    Schedule your first campaign to automate your messaging.\n                  </p>\n                  <Button\n                    onClick={() => setIsBulkModalOpen(true)}\n                    className=\"bg-whatsapp-500 text-white hover:bg-whatsapp-600\"\n                    data-testid=\"button-schedule-first-campaign\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Schedule Campaign\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n\n      <BulkMessageModal \n        isOpen={isBulkModalOpen} \n        onClose={() => setIsBulkModalOpen(false)} \n      />\n    </div>\n  );\n}\n","size_bytes":20084},"client/src/pages/sessions.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/layout/header\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { QRCodeModal } from \"@/components/modals/qr-code-modal\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { \n  Plus, \n  MessageCircle, \n  Power, \n  Trash, \n  QrCode,\n  Phone,\n  Clock,\n  Activity,\n  AlertCircle,\n  CheckCircle,\n  Wifi,\n  WifiOff\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface WhatsappSession {\n  id: string;\n  sessionId: string;\n  phone: string | null;\n  status: string;\n  qrCode: string | null;\n  lastSeen: string | null;\n  createdAt: string;\n}\n\nexport default function Sessions() {\n  const [isQRModalOpen, setIsQRModalOpen] = useState(false);\n  const [selectedSession, setSelectedSession] = useState<WhatsappSession | null>(null);\n  const { toast } = useToast();\n  const { lastMessage } = useWebSocket();\n\n  const { data: sessions = [], isLoading, refetch } = useQuery({\n    queryKey: [\"/api/sessions\"],\n  });\n\n  const createSessionMutation = useMutation({\n    mutationFn: (data: any) => apiRequest(\"POST\", \"/api/sessions\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sessions\"] });\n      toast({ title: \"Session created successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create session\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteSessionMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/sessions/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sessions\"] });\n      toast({ title: \"Session deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete session\", variant: \"destructive\" });\n    },\n  });\n\n  useEffect(() => {\n    if (lastMessage?.type?.includes('session')) {\n      refetch();\n    }\n  }, [lastMessage, refetch]);\n\n  const connectedSessions = sessions.filter((s: WhatsappSession) => s.status === 'connected');\n  const disconnectedSessions = sessions.filter((s: WhatsappSession) => s.status === 'disconnected');\n  const pendingSessions = sessions.filter((s: WhatsappSession) => s.status === 'qr_pending' || s.status === 'connecting');\n\n  const handleCreateSession = () => {\n    const sessionId = `session_${Date.now()}`;\n    createSessionMutation.mutate({ sessionId, status: 'connecting' });\n    setIsQRModalOpen(true);\n  };\n\n  const handleShowQR = (session: WhatsappSession) => {\n    setSelectedSession(session);\n    setIsQRModalOpen(true);\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'connected':\n        return <CheckCircle className=\"w-5 h-5 text-whatsapp-600\" />;\n      case 'connecting':\n        return <Activity className=\"w-5 h-5 text-blue-600 animate-pulse\" />;\n      case 'qr_pending':\n        return <QrCode className=\"w-5 h-5 text-orange-600\" />;\n      case 'disconnected':\n        return <AlertCircle className=\"w-5 h-5 text-red-600\" />;\n      default:\n        return <WifiOff className=\"w-5 h-5 text-gray-600\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'connected':\n        return 'bg-whatsapp-100 text-whatsapp-800';\n      case 'connecting':\n        return 'bg-blue-100 text-blue-800';\n      case 'qr_pending':\n        return 'bg-orange-100 text-orange-800';\n      case 'disconnected':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'connected':\n        return 'Connected';\n      case 'connecting':\n        return 'Connecting...';\n      case 'qr_pending':\n        return 'QR Pending';\n      case 'disconnected':\n        return 'Disconnected';\n      default:\n        return 'Unknown';\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar connectedSessions={connectedSessions} />\n      \n      <div className=\"flex-1 overflow-hidden\">\n        <Header \n          title=\"Sessions\" \n          subtitle=\"Manage your WhatsApp connections and devices\"\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          {/* Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-whatsapp-100 rounded-lg flex items-center justify-center\">\n                    <Wifi className=\"w-6 h-6 text-whatsapp-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Connected</p>\n                    <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-connected-sessions\">\n                      {connectedSessions.length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                    <QrCode className=\"w-6 h-6 text-orange-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Pending</p>\n                    <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-pending-sessions\">\n                      {pendingSessions.length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n                    <WifiOff className=\"w-6 h-6 text-red-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Disconnected</p>\n                    <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-disconnected-sessions\">\n                      {disconnectedSessions.length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <MessageCircle className=\"w-6 h-6 text-blue-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Total Sessions</p>\n                    <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-total-sessions\">\n                      {sessions.length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Header Actions */}\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-xl font-semibold text-gray-900\">WhatsApp Sessions</h2>\n            <Button\n              onClick={handleCreateSession}\n              className=\"bg-whatsapp-500 text-white hover:bg-whatsapp-600\"\n              disabled={createSessionMutation.isPending}\n              data-testid=\"button-new-session\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Session\n            </Button>\n          </div>\n\n          {/* Sessions Grid */}\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-4 mb-4\">\n                      <div className=\"w-12 h-12 bg-gray-200 rounded-full\"></div>\n                      <div className=\"flex-1 space-y-2\">\n                        <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                      </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"h-3 bg-gray-200 rounded\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : sessions.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {sessions.map((session: WhatsappSession) => (\n                <Card key={session.id} className=\"hover:shadow-md transition-shadow\" data-testid={`session-card-${session.id}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-12 h-12 bg-whatsapp-500 rounded-full flex items-center justify-center\">\n                          <MessageCircle className=\"w-6 h-6 text-white\" />\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold text-gray-900\">\n                            {session.phone || session.sessionId}\n                          </h3>\n                          <p className=\"text-sm text-gray-500\">\n                            Session: {session.sessionId.substring(0, 12)}...\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        {getStatusIcon(session.status)}\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-600\">Status</span>\n                        <Badge className={getStatusColor(session.status)}>\n                          {getStatusText(session.status)}\n                        </Badge>\n                      </div>\n\n                      {session.phone && (\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-600\">Phone</span>\n                          <div className=\"flex items-center text-sm text-gray-900\">\n                            <Phone className=\"w-4 h-4 mr-1\" />\n                            {session.phone}\n                          </div>\n                        </div>\n                      )}\n\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-gray-600\">Created</span>\n                        <span className=\"text-sm text-gray-900\">\n                          {format(new Date(session.createdAt), 'MMM d, yyyy')}\n                        </span>\n                      </div>\n\n                      {session.lastSeen && (\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm text-gray-600\">Last Seen</span>\n                          <div className=\"flex items-center text-sm text-gray-900\">\n                            <Clock className=\"w-4 h-4 mr-1\" />\n                            {format(new Date(session.lastSeen), 'MMM d, h:mm a')}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n\n                    <div className=\"flex items-center justify-between mt-6 pt-4 border-t border-gray-100\">\n                      <div className=\"flex space-x-2\">\n                        {(session.status === 'qr_pending' || session.status === 'connecting') && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleShowQR(session)}\n                            data-testid={`qr-${session.id}`}\n                          >\n                            <QrCode className=\"w-4 h-4 mr-1\" />\n                            QR Code\n                          </Button>\n                        )}\n                        {session.status === 'disconnected' && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleShowQR(session)}\n                            data-testid={`reconnect-${session.id}`}\n                          >\n                            <Power className=\"w-4 h-4 mr-1\" />\n                            Reconnect\n                          </Button>\n                        )}\n                      </div>\n                      \n                      <Button\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => deleteSessionMutation.mutate(session.id)}\n                        disabled={deleteSessionMutation.isPending}\n                        data-testid={`delete-${session.id}`}\n                      >\n                        <Trash className=\"w-4 h-4 text-red-600\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"text-center py-12\">\n                <MessageCircle className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No WhatsApp sessions</h3>\n                <p className=\"text-gray-500 mb-6\">\n                  Create your first WhatsApp session to start sending messages.\n                </p>\n                <Button\n                  onClick={handleCreateSession}\n                  className=\"bg-whatsapp-500 text-white hover:bg-whatsapp-600\"\n                  disabled={createSessionMutation.isPending}\n                  data-testid=\"button-create-first-session\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create Session\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Session Management Tips */}\n          {sessions.length > 0 && (\n            <Card className=\"mt-8\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                    <MessageCircle className=\"w-5 h-5 text-blue-600\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900 mb-2\">Session Management Tips</h3>\n                    <ul className=\"text-sm text-gray-600 space-y-1\">\n                      <li>• Keep your WhatsApp Web session active for continuous messaging</li>\n                      <li>• Each session can handle up to 30 messages per minute to avoid blocking</li>\n                      <li>• Scan QR codes with your phone's WhatsApp app {'>'} Settings {'>'} Linked Devices</li>\n                      <li>• Sessions may disconnect due to phone battery, network issues, or WhatsApp updates</li>\n                      <li>• Always reconnect quickly to maintain message delivery rates</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </main>\n      </div>\n\n      <QRCodeModal \n        isOpen={isQRModalOpen} \n        onClose={() => {\n          setIsQRModalOpen(false);\n          setSelectedSession(null);\n        }}\n        session={selectedSession}\n      />\n    </div>\n  );\n}\n","size_bytes":16483},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/layout/header\";\nimport { Sidebar } from \"@/components/layout/sidebar\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Settings as SettingsIcon, \n  Bell, \n  Shield, \n  Database, \n  Palette, \n  Clock,\n  MessageSquare,\n  Users,\n  Save\n} from \"lucide-react\";\n\nexport default function Settings() {\n  const [settings, setSettings] = useState({\n    // General Settings\n    applicationName: \"Waziper\",\n    timezone: \"UTC\",\n    language: \"en\",\n    \n    // Messaging Settings\n    defaultRateLimit: 30,\n    enableSpintax: true,\n    autoRetryFailed: true,\n    messageDelay: 2,\n    \n    // Notifications\n    emailNotifications: true,\n    campaignAlerts: true,\n    errorAlerts: true,\n    \n    // Security\n    sessionTimeout: 24,\n    enableApiAccess: false,\n    ipWhitelist: \"\",\n    \n    // Advanced\n    logLevel: \"info\",\n    retentionDays: 30,\n    enableAnalytics: true,\n  });\n\n  const { toast } = useToast();\n\n  const { data: sessions = [] } = useQuery({\n    queryKey: [\"/api/sessions\"],\n  });\n\n  const saveSettingsMutation = useMutation({\n    mutationFn: async (data: any) => {\n      // In a real app, this would save to backend\n      return new Promise(resolve => setTimeout(resolve, 1000));\n    },\n    onSuccess: () => {\n      toast({ title: \"Settings saved successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to save settings\", variant: \"destructive\" });\n    },\n  });\n\n  const connectedSessions = sessions.filter((s: any) => s.status === 'connected');\n\n  const handleSave = () => {\n    saveSettingsMutation.mutate(settings);\n  };\n\n  const updateSetting = (key: string, value: any) => {\n    setSettings(prev => ({ ...prev, [key]: value }));\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar connectedSessions={connectedSessions} />\n      \n      <div className=\"flex-1 overflow-hidden\">\n        <Header \n          title=\"Settings\" \n          subtitle=\"Configure your application preferences and security settings\"\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"max-w-4xl mx-auto space-y-6\">\n            {/* General Settings */}\n            <Card>\n              <div className=\"px-6 py-4 border-b border-gray-200\">\n                <div className=\"flex items-center space-x-2\">\n                  <SettingsIcon className=\"w-5 h-5 text-gray-600\" />\n                  <h3 className=\"text-lg font-semibold text-gray-900\">General Settings</h3>\n                </div>\n              </div>\n              <CardContent className=\"p-6 space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"appName\">Application Name</Label>\n                    <Input\n                      id=\"appName\"\n                      value={settings.applicationName}\n                      onChange={(e) => updateSetting('applicationName', e.target.value)}\n                      data-testid=\"input-app-name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"timezone\">Timezone</Label>\n                    <select\n                      id=\"timezone\"\n                      value={settings.timezone}\n                      onChange={(e) => updateSetting('timezone', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-whatsapp-500 focus:border-whatsapp-500\"\n                      data-testid=\"select-timezone\"\n                    >\n                      <option value=\"UTC\">UTC</option>\n                      <option value=\"America/New_York\">Eastern Time</option>\n                      <option value=\"America/Chicago\">Central Time</option>\n                      <option value=\"America/Denver\">Mountain Time</option>\n                      <option value=\"America/Los_Angeles\">Pacific Time</option>\n                      <option value=\"Europe/London\">London</option>\n                      <option value=\"Europe/Paris\">Paris</option>\n                      <option value=\"Asia/Tokyo\">Tokyo</option>\n                    </select>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Messaging Settings */}\n            <Card>\n              <div className=\"px-6 py-4 border-b border-gray-200\">\n                <div className=\"flex items-center space-x-2\">\n                  <MessageSquare className=\"w-5 h-5 text-gray-600\" />\n                  <h3 className=\"text-lg font-semibold text-gray-900\">Messaging Settings</h3>\n                </div>\n              </div>\n              <CardContent className=\"p-6 space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"rateLimit\">Default Rate Limit (messages/minute)</Label>\n                    <Input\n                      id=\"rateLimit\"\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"60\"\n                      value={settings.defaultRateLimit}\n                      onChange={(e) => updateSetting('defaultRateLimit', parseInt(e.target.value))}\n                      data-testid=\"input-rate-limit\"\n                    />\n                    <p className=\"text-xs text-gray-500 mt-1\">Recommended: 30 to avoid WhatsApp blocking</p>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"messageDelay\">Message Delay (seconds)</Label>\n                    <Input\n                      id=\"messageDelay\"\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"60\"\n                      value={settings.messageDelay}\n                      onChange={(e) => updateSetting('messageDelay', parseInt(e.target.value))}\n                      data-testid=\"input-message-delay\"\n                    />\n                    <p className=\"text-xs text-gray-500 mt-1\">Delay between individual messages</p>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Enable Spintax</Label>\n                      <p className=\"text-sm text-gray-500\">Allow message variations using spintax syntax</p>\n                    </div>\n                    <Switch\n                      checked={settings.enableSpintax}\n                      onCheckedChange={(checked) => updateSetting('enableSpintax', checked)}\n                      data-testid=\"switch-enable-spintax\"\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Auto-retry Failed Messages</Label>\n                      <p className=\"text-sm text-gray-500\">Automatically retry failed message deliveries</p>\n                    </div>\n                    <Switch\n                      checked={settings.autoRetryFailed}\n                      onCheckedChange={(checked) => updateSetting('autoRetryFailed', checked)}\n                      data-testid=\"switch-auto-retry\"\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Notifications */}\n            <Card>\n              <div className=\"px-6 py-4 border-b border-gray-200\">\n                <div className=\"flex items-center space-x-2\">\n                  <Bell className=\"w-5 h-5 text-gray-600\" />\n                  <h3 className=\"text-lg font-semibold text-gray-900\">Notifications</h3>\n                </div>\n              </div>\n              <CardContent className=\"p-6 space-y-4\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Email Notifications</Label>\n                      <p className=\"text-sm text-gray-500\">Receive email alerts for important events</p>\n                    </div>\n                    <Switch\n                      checked={settings.emailNotifications}\n                      onCheckedChange={(checked) => updateSetting('emailNotifications', checked)}\n                      data-testid=\"switch-email-notifications\"\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Campaign Alerts</Label>\n                      <p className=\"text-sm text-gray-500\">Get notified when campaigns complete</p>\n                    </div>\n                    <Switch\n                      checked={settings.campaignAlerts}\n                      onCheckedChange={(checked) => updateSetting('campaignAlerts', checked)}\n                      data-testid=\"switch-campaign-alerts\"\n                    />\n                  </div>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Error Alerts</Label>\n                      <p className=\"text-sm text-gray-500\">Receive notifications for system errors</p>\n                    </div>\n                    <Switch\n                      checked={settings.errorAlerts}\n                      onCheckedChange={(checked) => updateSetting('errorAlerts', checked)}\n                      data-testid=\"switch-error-alerts\"\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Security */}\n            <Card>\n              <div className=\"px-6 py-4 border-b border-gray-200\">\n                <div className=\"flex items-center space-x-2\">\n                  <Shield className=\"w-5 h-5 text-gray-600\" />\n                  <h3 className=\"text-lg font-semibold text-gray-900\">Security Settings</h3>\n                </div>\n              </div>\n              <CardContent className=\"p-6 space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"sessionTimeout\">Session Timeout (hours)</Label>\n                    <Input\n                      id=\"sessionTimeout\"\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"168\"\n                      value={settings.sessionTimeout}\n                      onChange={(e) => updateSetting('sessionTimeout', parseInt(e.target.value))}\n                      data-testid=\"input-session-timeout\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <Label>Enable API Access</Label>\n                      <p className=\"text-sm text-gray-500\">Allow external API access to your account</p>\n                    </div>\n                    <Switch\n                      checked={settings.enableApiAccess}\n                      onCheckedChange={(checked) => updateSetting('enableApiAccess', checked)}\n                      data-testid=\"switch-api-access\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"ipWhitelist\">IP Whitelist</Label>\n                    <Textarea\n                      id=\"ipWhitelist\"\n                      placeholder=\"Enter IP addresses (one per line)&#10;192.168.1.1&#10;10.0.0.1\"\n                      value={settings.ipWhitelist}\n                      onChange={(e) => updateSetting('ipWhitelist', e.target.value)}\n                      className=\"min-h-[100px]\"\n                      data-testid=\"textarea-ip-whitelist\"\n                    />\n                    <p className=\"text-xs text-gray-500 mt-1\">One IP address per line</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Advanced Settings */}\n            <Card>\n              <div className=\"px-6 py-4 border-b border-gray-200\">\n                <div className=\"flex items-center space-x-2\">\n                  <Database className=\"w-5 h-5 text-gray-600\" />\n                  <h3 className=\"text-lg font-semibold text-gray-900\">Advanced Settings</h3>\n                </div>\n              </div>\n              <CardContent className=\"p-6 space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"logLevel\">Log Level</Label>\n                    <select\n                      id=\"logLevel\"\n                      value={settings.logLevel}\n                      onChange={(e) => updateSetting('logLevel', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-whatsapp-500 focus:border-whatsapp-500\"\n                      data-testid=\"select-log-level\"\n                    >\n                      <option value=\"error\">Error</option>\n                      <option value=\"warn\">Warning</option>\n                      <option value=\"info\">Info</option>\n                      <option value=\"debug\">Debug</option>\n                    </select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"retention\">Data Retention (days)</Label>\n                    <Input\n                      id=\"retention\"\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"365\"\n                      value={settings.retentionDays}\n                      onChange={(e) => updateSetting('retentionDays', parseInt(e.target.value))}\n                      data-testid=\"input-retention-days\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Enable Analytics</Label>\n                    <p className=\"text-sm text-gray-500\">Collect usage analytics for performance insights</p>\n                  </div>\n                  <Switch\n                    checked={settings.enableAnalytics}\n                    onCheckedChange={(checked) => updateSetting('enableAnalytics', checked)}\n                    data-testid=\"switch-enable-analytics\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* System Information */}\n            <Card>\n              <div className=\"px-6 py-4 border-b border-gray-200\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">System Information</h3>\n              </div>\n              <CardContent className=\"p-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-whatsapp-600 mb-1\">\n                      {connectedSessions.length}\n                    </div>\n                    <p className=\"text-sm text-gray-600\">Active Sessions</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-blue-600 mb-1\">\n                      v1.0.0\n                    </div>\n                    <p className=\"text-sm text-gray-600\">Application Version</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-purple-600 mb-1\">\n                      Online\n                    </div>\n                    <p className=\"text-sm text-gray-600\">System Status</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Save Button */}\n            <div className=\"flex justify-end\">\n              <Button\n                onClick={handleSave}\n                disabled={saveSettingsMutation.isPending}\n                className=\"bg-whatsapp-500 text-white hover:bg-whatsapp-600\"\n                data-testid=\"button-save-settings\"\n              >\n                <Save className=\"w-4 h-4 mr-2\" />\n                {saveSettingsMutation.isPending ? \"Saving...\" : \"Save Settings\"}\n              </Button>\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16802},"client/src/components/layout/header.tsx":{"content":"import { User, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface HeaderProps {\n  title: string;\n  subtitle?: string;\n  onNewCampaign?: () => void;\n}\n\nexport function Header({ title, subtitle, onNewCampaign }: HeaderProps) {\n  return (\n    <header className=\"bg-white border-b border-gray-200 px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">{title}</h1>\n          {subtitle && (\n            <p className=\"text-sm text-gray-600 mt-1\">{subtitle}</p>\n          )}\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          {onNewCampaign && (\n            <Button \n              className=\"bg-whatsapp-500 text-white hover:bg-whatsapp-600\"\n              onClick={onNewCampaign}\n              data-testid=\"button-new-campaign\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Campaign\n            </Button>\n          )}\n          <div className=\"w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center\">\n            <User className=\"w-4 h-4 text-gray-600\" />\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1213},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  BarChart3, \n  MessageSquare, \n  Users, \n  Bot, \n  Calendar, \n  Settings, \n  BarChart, \n  MessageCircle \n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: BarChart3 },\n  { name: \"Campaigns\", href: \"/campaigns\", icon: MessageSquare },\n  { name: \"Contacts\", href: \"/contacts\", icon: Users },\n  { name: \"Auto-Reply\", href: \"/auto-reply\", icon: Bot },\n  { name: \"Scheduler\", href: \"/scheduler\", icon: Calendar },\n  { name: \"Sessions\", href: \"/sessions\", icon: MessageCircle },\n  { name: \"Analytics\", href: \"/analytics\", icon: BarChart },\n  { name: \"Settings\", href: \"/settings\", icon: Settings },\n];\n\ninterface SidebarProps {\n  connectedSessions: Array<{ id: string; phone: string; status: string }>;\n}\n\nexport function Sidebar({ connectedSessions }: SidebarProps) {\n  const [location] = useLocation();\n\n  return (\n    <div className=\"hidden md:flex md:flex-shrink-0\">\n      <div className=\"flex flex-col w-64 bg-white border-r border-gray-200\">\n        {/* Logo */}\n        <div className=\"flex items-center h-16 px-6 border-b border-gray-200\">\n          <div className=\"flex items-center\">\n            <div className=\"w-8 h-8 bg-whatsapp-500 rounded-lg flex items-center justify-center\">\n              <MessageCircle className=\"w-5 h-5 text-white\" />\n            </div>\n            <span className=\"ml-3 text-xl font-bold text-gray-900\">Waziper</span>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"flex-1 px-4 py-6 space-y-2\">\n          {navigation.map((item) => {\n            const isActive = location === item.href;\n            const Icon = item.icon;\n            \n            return (\n              <Link key={item.name} href={item.href}>\n                <div\n                  className={cn(\n                    \"flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors cursor-pointer\",\n                    isActive\n                      ? \"text-whatsapp-700 bg-whatsapp-50\"\n                      : \"text-gray-600 hover:bg-gray-50\"\n                  )}\n                  data-testid={`nav-${item.name.toLowerCase().replace(' ', '-')}`}\n                >\n                  <Icon className=\"w-5 h-5 mr-3\" />\n                  {item.name}\n                </div>\n              </Link>\n            );\n          })}\n        </nav>\n\n        {/* Connected Sessions Status */}\n        <div className=\"px-4 py-4 border-t border-gray-200\">\n          {connectedSessions.length > 0 ? (\n            connectedSessions.slice(0, 2).map((session) => (\n              <div key={session.id} className=\"flex items-center mb-2\">\n                <div className=\"w-3 h-3 bg-whatsapp-500 rounded-full\"></div>\n                <span className=\"ml-2 text-sm text-gray-600\">\n                  Connected: {session.phone}\n                </span>\n              </div>\n            ))\n          ) : (\n            <div className=\"flex items-center\">\n              <div className=\"w-3 h-3 bg-gray-300 rounded-full\"></div>\n              <span className=\"ml-2 text-sm text-gray-600\">No active sessions</span>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3232},"client/src/components/modals/auto-reply-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { X, Bot, Clock, Info } from \"lucide-react\";\n\nconst autoReplySchema = z.object({\n  name: z.string().min(1, \"Rule name is required\"),\n  triggerType: z.string().min(1, \"Please select a trigger type\"),\n  keywords: z.array(z.string()).optional(),\n  response: z.string().min(1, \"Response message is required\"),\n  delay: z.number().min(0).max(300).default(0),\n  isActive: z.boolean().default(true),\n  businessHoursOnly: z.boolean().default(false),\n  businessHoursStart: z.string().default(\"09:00\"),\n  businessHoursEnd: z.string().default(\"18:00\"),\n  sessionId: z.string().min(1, \"Please select a WhatsApp session\"),\n});\n\ntype AutoReplyFormData = z.infer<typeof autoReplySchema>;\n\ninterface AutoReplyModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  editingRule?: any;\n}\n\nexport function AutoReplyModal({ isOpen, onClose, editingRule }: AutoReplyModalProps) {\n  const [keywordInput, setKeywordInput] = useState(\"\");\n  const { toast } = useToast();\n\n  const form = useForm<AutoReplyFormData>({\n    resolver: zodResolver(autoReplySchema),\n    defaultValues: editingRule ? {\n      ...editingRule,\n      keywords: editingRule.keywords || [],\n    } : {\n      name: \"\",\n      triggerType: \"\",\n      keywords: [],\n      response: \"\",\n      delay: 0,\n      isActive: true,\n      businessHoursOnly: false,\n      businessHoursStart: \"09:00\",\n      businessHoursEnd: \"18:00\",\n      sessionId: \"\",\n    },\n  });\n\n  const { data: sessions = [] } = useQuery({\n    queryKey: [\"/api/sessions\"],\n  });\n\n  const createRuleMutation = useMutation({\n    mutationFn: (data: AutoReplyFormData) => \n      apiRequest(\"POST\", \"/api/auto-reply-rules\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auto-reply-rules\"] });\n      toast({ title: \"Auto-reply rule created successfully\" });\n      onClose();\n      form.reset();\n    },\n    onError: () => {\n      toast({ title: \"Failed to create auto-reply rule\", variant: \"destructive\" });\n    },\n  });\n\n  const updateRuleMutation = useMutation({\n    mutationFn: (data: AutoReplyFormData) => \n      apiRequest(\"PUT\", `/api/auto-reply-rules/${editingRule.id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auto-reply-rules\"] });\n      toast({ title: \"Auto-reply rule updated successfully\" });\n      onClose();\n      form.reset();\n    },\n    onError: () => {\n      toast({ title: \"Failed to update auto-reply rule\", variant: \"destructive\" });\n    },\n  });\n\n  const connectedSessions = sessions.filter((s: any) => s.status === 'connected');\n\n  const triggerTypes = [\n    { value: \"contains\", label: \"Contains keywords\", needsKeywords: true },\n    { value: \"exact\", label: \"Exact match\", needsKeywords: true },\n    { value: \"starts_with\", label: \"Starts with\", needsKeywords: true },\n    { value: \"ends_with\", label: \"Ends with\", needsKeywords: true },\n    { value: \"any\", label: \"Any message\", needsKeywords: false },\n    { value: \"first_message\", label: \"First message from contact\", needsKeywords: false },\n  ];\n\n  const selectedTriggerType = triggerTypes.find(t => t.value === form.watch('triggerType'));\n\n  const addKeyword = () => {\n    if (keywordInput.trim()) {\n      const currentKeywords = form.getValues('keywords') || [];\n      if (!currentKeywords.includes(keywordInput.trim())) {\n        form.setValue('keywords', [...currentKeywords, keywordInput.trim()]);\n        setKeywordInput(\"\");\n      }\n    }\n  };\n\n  const removeKeyword = (keyword: string) => {\n    const currentKeywords = form.getValues('keywords') || [];\n    form.setValue('keywords', currentKeywords.filter(k => k !== keyword));\n  };\n\n  const onSubmit = (data: AutoReplyFormData) => {\n    if (editingRule) {\n      updateRuleMutation.mutate(data);\n    } else {\n      createRuleMutation.mutate(data);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <Bot className=\"w-5 h-5 text-orange-600\" />\n            <span>{editingRule ? \"Edit\" : \"Create\"} Auto-Reply Rule</span>\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Rule Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter rule name...\" {...field} data-testid=\"input-rule-name\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"sessionId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>WhatsApp Session</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-session\">\n                        <SelectValue placeholder=\"Select a connected session\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {connectedSessions.map((session: any) => (\n                        <SelectItem key={session.id} value={session.id}>\n                          {session.phone || session.sessionId}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"triggerType\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Trigger Type</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-trigger-type\">\n                        <SelectValue placeholder=\"Select trigger type\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {triggerTypes.map((type) => (\n                        <SelectItem key={type.value} value={type.value}>\n                          {type.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {selectedTriggerType?.needsKeywords && (\n              <FormField\n                control={form.control}\n                name=\"keywords\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Keywords</FormLabel>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex space-x-2\">\n                        <Input\n                          placeholder=\"Enter keyword...\"\n                          value={keywordInput}\n                          onChange={(e) => setKeywordInput(e.target.value)}\n                          onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addKeyword())}\n                          data-testid=\"input-keyword\"\n                        />\n                        <Button\n                          type=\"button\"\n                          onClick={addKeyword}\n                          disabled={!keywordInput.trim()}\n                          data-testid=\"button-add-keyword\"\n                        >\n                          Add\n                        </Button>\n                      </div>\n                      \n                      {field.value && field.value.length > 0 && (\n                        <div className=\"flex flex-wrap gap-2\">\n                          {field.value.map((keyword) => (\n                            <div\n                              key={keyword}\n                              className=\"flex items-center bg-gray-100 rounded-md px-2 py-1 text-sm\"\n                            >\n                              <span>{keyword}</span>\n                              <button\n                                type=\"button\"\n                                onClick={() => removeKeyword(keyword)}\n                                className=\"ml-2 text-gray-500 hover:text-red-500\"\n                                data-testid={`button-remove-keyword-${keyword}`}\n                              >\n                                <X className=\"w-3 h-3\" />\n                              </button>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                      \n                      <p className=\"text-xs text-gray-500\">\n                        Keywords are case-insensitive. Add multiple keywords to trigger on any of them.\n                      </p>\n                    </div>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            <FormField\n              control={form.control}\n              name=\"response\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Auto-Reply Message</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Enter your automatic response...\"\n                      rows={3}\n                      {...field}\n                      data-testid=\"textarea-response\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"delay\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Delay (seconds)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"300\"\n                        {...field}\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                        data-testid=\"input-delay\"\n                      />\n                    </FormControl>\n                    <p className=\"text-xs text-gray-500\">\n                      Delay before sending the auto-reply (0-300 seconds)\n                    </p>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"isActive\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <div className=\"flex items-center space-x-2 pt-2\">\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-is-active\"\n                      />\n                      <span className=\"text-sm text-gray-600\">\n                        {field.value ? \"Active\" : \"Inactive\"}\n                      </span>\n                    </div>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"businessHoursOnly\"\n              render={({ field }) => (\n                <FormItem>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <FormLabel>Business Hours Only</FormLabel>\n                      <p className=\"text-sm text-gray-500\">Only trigger during specified business hours</p>\n                    </div>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                      data-testid=\"switch-business-hours\"\n                    />\n                  </div>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {form.watch('businessHoursOnly') && (\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"businessHoursStart\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Start Time</FormLabel>\n                      <FormControl>\n                        <Input type=\"time\" {...field} data-testid=\"input-business-start\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"businessHoursEnd\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>End Time</FormLabel>\n                      <FormControl>\n                        <Input type=\"time\" {...field} data-testid=\"input-business-end\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            )}\n\n            {/* Help Information */}\n            <div className=\"bg-blue-50 p-4 rounded-lg\">\n              <div className=\"flex items-start space-x-2\">\n                <Info className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n                <div>\n                  <h4 className=\"text-sm font-medium text-blue-900 mb-2\">Auto-Reply Tips</h4>\n                  <ul className=\"text-xs text-blue-700 space-y-1\">\n                    <li>• Rules are processed in the order they were created</li>\n                    <li>• Only the first matching rule will trigger for each message</li>\n                    <li>• Use delays to make responses feel more natural</li>\n                    <li>• Business hours are based on your system timezone</li>\n                    <li>• Keywords are matched case-insensitively</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-end space-x-3 pt-4 border-t border-gray-200\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onClose}\n                data-testid=\"button-cancel-rule\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createRuleMutation.isPending || updateRuleMutation.isPending || connectedSessions.length === 0}\n                className=\"bg-whatsapp-500 text-white hover:bg-whatsapp-600\"\n                data-testid=\"button-save-rule\"\n              >\n                {createRuleMutation.isPending || updateRuleMutation.isPending \n                  ? \"Saving...\" \n                  : editingRule ? \"Update Rule\" : \"Create Rule\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":16327},"client/src/components/modals/bulk-message-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { X, Upload, Calendar, Clock, Info, AlertTriangle } from \"lucide-react\";\n\nconst campaignSchema = z.object({\n  name: z.string().min(1, \"Campaign name is required\"),\n  message: z.string().min(1, \"Message content is required\"),\n  contactGroups: z.array(z.string()).optional(),\n  scheduledAt: z.string().optional(),\n  rateLimit: z.number().min(1).max(60).default(30),\n  sessionId: z.string().min(1, \"Please select a WhatsApp session\"),\n});\n\ntype CampaignFormData = z.infer<typeof campaignSchema>;\n\ninterface BulkMessageModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function BulkMessageModal({ isOpen, onClose }: BulkMessageModalProps) {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [isScheduled, setIsScheduled] = useState(false);\n  const [spintaxInfo, setSpintaxInfo] = useState({ isValid: true, variations: 1, errors: [] });\n  const { toast } = useToast();\n\n  const form = useForm<CampaignFormData>({\n    resolver: zodResolver(campaignSchema),\n    defaultValues: {\n      name: \"\",\n      message: \"\",\n      contactGroups: [],\n      rateLimit: 30,\n      sessionId: \"\",\n    },\n  });\n\n  const { data: contacts = [] } = useQuery({\n    queryKey: [\"/api/contacts\"],\n  });\n\n  const { data: sessions = [] } = useQuery({\n    queryKey: [\"/api/sessions\"],\n  });\n\n  const spintaxMutation = useMutation({\n    mutationFn: (text: string) => apiRequest(\"POST\", \"/api/spintax/validate\", { text }),\n    onSuccess: (data) => {\n      setSpintaxInfo(data);\n    },\n  });\n\n  const createCampaignMutation = useMutation({\n    mutationFn: async (data: CampaignFormData) => {\n      const formData = new FormData();\n      formData.append('data', JSON.stringify(data));\n      if (selectedFile) {\n        formData.append('media', selectedFile);\n      }\n      \n      const response = await fetch('/api/campaigns', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to create campaign');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/campaigns\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/dashboard\"] });\n      toast({ title: \"Campaign created successfully\" });\n      onClose();\n      form.reset();\n      setSelectedFile(null);\n      setIsScheduled(false);\n    },\n    onError: () => {\n      toast({ title: \"Failed to create campaign\", variant: \"destructive\" });\n    },\n  });\n\n  // Get unique groups from contacts\n  const contactGroups = Array.from(\n    new Set(contacts.flatMap((contact: any) => contact.groups || []))\n  );\n\n  const connectedSessions = sessions.filter((s: any) => s.status === 'connected');\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const maxSize = 16 * 1024 * 1024; // 16MB\n      if (file.size > maxSize) {\n        toast({ title: \"File too large. Maximum size is 16MB.\", variant: \"destructive\" });\n        return;\n      }\n      setSelectedFile(file);\n    }\n  };\n\n  const insertVariable = (variable: string) => {\n    const currentMessage = form.getValues('message');\n    const textarea = document.querySelector('textarea[name=\"message\"]') as HTMLTextAreaElement;\n    if (textarea) {\n      const start = textarea.selectionStart;\n      const end = textarea.selectionEnd;\n      const newMessage = currentMessage.substring(0, start) + `{${variable}}` + currentMessage.substring(end);\n      form.setValue('message', newMessage);\n      \n      // Restore cursor position\n      setTimeout(() => {\n        textarea.focus();\n        textarea.setSelectionRange(start + variable.length + 2, start + variable.length + 2);\n      }, 0);\n    }\n  };\n\n  const onSubmit = (data: CampaignFormData) => {\n    if (isScheduled && data.scheduledAt) {\n      const scheduledDate = new Date(data.scheduledAt);\n      if (scheduledDate <= new Date()) {\n        toast({ title: \"Scheduled time must be in the future\", variant: \"destructive\" });\n        return;\n      }\n      data.scheduledAt = scheduledDate.toISOString();\n    } else {\n      data.scheduledAt = undefined;\n    }\n\n    createCampaignMutation.mutate(data);\n  };\n\n  // Validate spintax when message changes\n  const messageValue = form.watch('message');\n  useEffect(() => {\n    if (messageValue && messageValue.includes('{') && messageValue.includes('|')) {\n      const timeoutId = setTimeout(() => {\n        spintaxMutation.mutate(messageValue);\n      }, 500);\n      return () => clearTimeout(timeoutId);\n    } else {\n      setSpintaxInfo({ isValid: true, variations: 1, errors: [] });\n    }\n  }, [messageValue]);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Create Bulk Message Campaign</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Campaign Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter campaign name...\" {...field} data-testid=\"input-campaign-name\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"sessionId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>WhatsApp Session</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-session\">\n                        <SelectValue placeholder=\"Select a connected session\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {connectedSessions.map((session: any) => (\n                        <SelectItem key={session.id} value={session.id}>\n                          {session.phone || session.sessionId}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"contactGroups\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Select Contacts</FormLabel>\n                  <div className=\"space-y-2\">\n                    <Select \n                      onValueChange={(value) => {\n                        const newGroups = [...(field.value || [])];\n                        if (value === \"all\") {\n                          field.onChange([]);\n                        } else if (!newGroups.includes(value)) {\n                          newGroups.push(value);\n                          field.onChange(newGroups);\n                        }\n                      }}\n                    >\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-contact-groups\">\n                          <SelectValue placeholder=\"Select contact groups\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Contacts ({contacts.length})</SelectItem>\n                        {contactGroups.map((group) => {\n                          const groupCount = contacts.filter((c: any) => c.groups?.includes(group)).length;\n                          return (\n                            <SelectItem key={group} value={group}>\n                              {group} ({groupCount})\n                            </SelectItem>\n                          );\n                        })}\n                      </SelectContent>\n                    </Select>\n                    \n                    {field.value && field.value.length > 0 && (\n                      <div className=\"flex flex-wrap gap-2\">\n                        {field.value.map((group) => (\n                          <Badge key={group} variant=\"secondary\" className=\"flex items-center gap-1\">\n                            {group}\n                            <button\n                              type=\"button\"\n                              onClick={() => {\n                                const newGroups = field.value?.filter(g => g !== group) || [];\n                                field.onChange(newGroups);\n                              }}\n                              className=\"ml-1 hover:bg-gray-200 rounded\"\n                            >\n                              <X className=\"w-3 h-3\" />\n                            </button>\n                          </Badge>\n                        ))}\n                      </div>\n                    )}\n                    \n                    <p className=\"text-sm text-gray-500\">\n                      Selected: {\n                        !field.value || field.value.length === 0 \n                          ? contacts.length \n                          : contacts.filter((c: any) => \n                              field.value?.some(group => c.groups?.includes(group))\n                            ).length\n                      } contacts\n                    </p>\n                  </div>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"message\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Message Content</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Hello {name}, we have exciting news for you...\"\n                      rows={4}\n                      {...field}\n                      data-testid=\"textarea-message-content\"\n                    />\n                  </FormControl>\n                  <div className=\"flex flex-wrap gap-2 mt-2\">\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => insertVariable('name')}\n                      data-testid=\"button-insert-name\"\n                    >\n                      {\"{name}\"}\n                    </Button>\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => insertVariable('phone')}\n                      data-testid=\"button-insert-phone\"\n                    >\n                      {\"{phone}\"}\n                    </Button>\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      size=\"sm\"\n                      onClick={() => insertVariable('email')}\n                      data-testid=\"button-insert-email\"\n                    >\n                      {\"{email}\"}\n                    </Button>\n                  </div>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Spintax Support */}\n            <div className=\"bg-blue-50 p-4 rounded-lg\">\n              <div className=\"flex items-start space-x-2\">\n                <Info className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n                <div>\n                  <h4 className=\"text-sm font-medium text-blue-900 mb-2\">Spintax Support</h4>\n                  <p className=\"text-xs text-blue-700 mb-2\">\n                    Use {\"{option1|option2|option3}\"} for message variations\n                  </p>\n                  <p className=\"text-xs text-blue-600\">\n                    Example: \"Hello {\"{name}\"}, {\"{hope you're doing well|how are you today|hope you're having a great day}\"}!\"\n                  </p>\n                  {messageValue && spintaxInfo.variations > 1 && (\n                    <p className=\"text-xs text-whatsapp-600 mt-2 font-medium\">\n                      ✓ {spintaxInfo.variations} message variations detected\n                    </p>\n                  )}\n                  {!spintaxInfo.isValid && (\n                    <div className=\"mt-2\">\n                      <p className=\"text-xs text-red-600 font-medium\">Spintax errors:</p>\n                      {spintaxInfo.errors.map((error, index) => (\n                        <p key={index} className=\"text-xs text-red-600\">• {error}</p>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Media Attachment */}\n            <div>\n              <FormLabel>Media Attachment (Optional)</FormLabel>\n              <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-4 text-center\">\n                <input\n                  type=\"file\"\n                  accept=\"image/*,video/*,audio/*,.pdf,.doc,.docx\"\n                  onChange={handleFileChange}\n                  className=\"hidden\"\n                  id=\"media-upload\"\n                  data-testid=\"input-media-upload\"\n                />\n                <label htmlFor=\"media-upload\" className=\"cursor-pointer\">\n                  <Upload className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n                  <p className=\"text-sm text-gray-600\">\n                    {selectedFile ? selectedFile.name : \"Drag and drop files or browse\"}\n                  </p>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Supports: Images, Videos, Documents (Max 16MB)\n                  </p>\n                </label>\n                {selectedFile && (\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setSelectedFile(null)}\n                    className=\"mt-2\"\n                    data-testid=\"button-remove-media\"\n                  >\n                    Remove file\n                  </Button>\n                )}\n              </div>\n            </div>\n\n            {/* Scheduling */}\n            <div>\n              <FormLabel>Schedule</FormLabel>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <label className=\"flex items-center\">\n                    <input\n                      type=\"radio\"\n                      name=\"schedule\"\n                      checked={!isScheduled}\n                      onChange={() => setIsScheduled(false)}\n                      className=\"text-whatsapp-500\"\n                      data-testid=\"radio-send-now\"\n                    />\n                    <span className=\"ml-2 text-sm text-gray-700\">Send Now</span>\n                  </label>\n                  <label className=\"flex items-center\">\n                    <input\n                      type=\"radio\"\n                      name=\"schedule\"\n                      checked={isScheduled}\n                      onChange={() => setIsScheduled(true)}\n                      className=\"text-whatsapp-500\"\n                      data-testid=\"radio-schedule-later\"\n                    />\n                    <span className=\"ml-2 text-sm text-gray-700\">Schedule for Later</span>\n                  </label>\n                </div>\n                \n                {isScheduled && (\n                  <FormField\n                    control={form.control}\n                    name=\"scheduledAt\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <div className=\"grid grid-cols-2 gap-3\">\n                            <div className=\"relative\">\n                              <Calendar className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                              <Input\n                                type=\"date\"\n                                {...field}\n                                min={new Date().toISOString().split('T')[0]}\n                                className=\"pl-10\"\n                                data-testid=\"input-schedule-date\"\n                              />\n                            </div>\n                            <div className=\"relative\">\n                              <Clock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                              <Input\n                                type=\"time\"\n                                onChange={(e) => {\n                                  const date = field.value?.split('T')[0] || new Date().toISOString().split('T')[0];\n                                  const time = e.target.value;\n                                  field.onChange(`${date}T${time}`);\n                                }}\n                                className=\"pl-10\"\n                                data-testid=\"input-schedule-time\"\n                              />\n                            </div>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                )}\n              </div>\n            </div>\n\n            {/* Rate Limiting */}\n            <div className=\"bg-yellow-50 p-4 rounded-lg\">\n              <div className=\"flex items-start space-x-2\">\n                <AlertTriangle className=\"w-5 h-5 text-yellow-600 mt-0.5\" />\n                <div className=\"flex-1\">\n                  <h4 className=\"text-sm font-medium text-yellow-900 mb-2\">Rate Limiting</h4>\n                  <FormField\n                    control={form.control}\n                    name=\"rateLimit\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <div className=\"flex items-center space-x-4\">\n                          <FormLabel className=\"text-sm text-yellow-700\">Messages per minute:</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              min=\"1\"\n                              max=\"60\"\n                              {...field}\n                              onChange={(e) => field.onChange(parseInt(e.target.value))}\n                              className=\"w-20\"\n                              data-testid=\"input-rate-limit\"\n                            />\n                          </FormControl>\n                        </div>\n                        <p className=\"text-xs text-yellow-600 mt-1\">\n                          Recommended: 30 messages/minute to avoid WhatsApp blocking\n                        </p>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-end space-x-3 pt-4 border-t border-gray-200\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onClose}\n                data-testid=\"button-cancel-campaign\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                disabled={!form.formState.isValid}\n                data-testid=\"button-preview-campaign\"\n              >\n                Preview\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createCampaignMutation.isPending || !spintaxInfo.isValid || connectedSessions.length === 0}\n                className=\"bg-whatsapp-500 text-white hover:bg-whatsapp-600\"\n                data-testid=\"button-start-campaign\"\n              >\n                {createCampaignMutation.isPending ? \"Creating...\" : isScheduled ? \"Schedule Campaign\" : \"Start Campaign\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":21214},"client/src/components/modals/import-contacts-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { X, Upload, Download, FileText, CheckCircle, AlertCircle } from \"lucide-react\";\n\ninterface ImportContactsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function ImportContactsModal({ isOpen, onClose }: ImportContactsModalProps) {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [importResult, setImportResult] = useState<any>(null);\n  const { toast } = useToast();\n\n  const importMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('csv', file);\n      \n      const response = await fetch('/api/contacts/import', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to import contacts');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts\"] });\n      setImportResult(data);\n      toast({ \n        title: `Successfully imported ${data.imported} contacts`,\n        description: data.errors > 0 ? `${data.errors} rows had errors` : undefined\n      });\n    },\n    onError: () => {\n      toast({ title: \"Failed to import contacts\", variant: \"destructive\" });\n    },\n  });\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      if (!file.name.endsWith('.csv')) {\n        toast({ title: \"Please select a CSV file\", variant: \"destructive\" });\n        return;\n      }\n      setSelectedFile(file);\n      setImportResult(null);\n    }\n  };\n\n  const handleImport = () => {\n    if (selectedFile) {\n      importMutation.mutate(selectedFile);\n    }\n  };\n\n  const handleDownloadTemplate = () => {\n    const csvContent = 'name,phone,email,groups\\n\"John Doe\",\"+1234567890\",\"john@example.com\",\"VIP,Customers\"\\n\"Jane Smith\",\"+1234567891\",\"jane@example.com\",\"Newsletter\"';\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'contacts_template.csv';\n    document.body.appendChild(a);\n    a.click();\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n  };\n\n  const handleReset = () => {\n    setSelectedFile(null);\n    setImportResult(null);\n  };\n\n  const handleClose = () => {\n    onClose();\n    setTimeout(() => {\n      handleReset();\n    }, 300);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-lg\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Upload className=\"w-5 h-5 text-purple-600\" />\n              <span>Import Contacts</span>\n            </div>\n            <Button variant=\"ghost\" size=\"sm\" onClick={handleClose} data-testid=\"button-close-import-modal\">\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {!importResult ? (\n            <>\n              {/* File Upload Area */}\n              <div className=\"space-y-4\">\n                <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n                  <input\n                    type=\"file\"\n                    accept=\".csv\"\n                    onChange={handleFileChange}\n                    className=\"hidden\"\n                    id=\"csv-upload\"\n                    data-testid=\"input-csv-file\"\n                  />\n                  <label htmlFor=\"csv-upload\" className=\"cursor-pointer\">\n                    <div className=\"space-y-2\">\n                      <Upload className=\"w-12 h-12 text-gray-400 mx-auto\" />\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-900\">\n                          {selectedFile ? selectedFile.name : \"Choose CSV file\"}\n                        </p>\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          Or drag and drop your CSV file here\n                        </p>\n                      </div>\n                    </div>\n                  </label>\n                </div>\n\n                {selectedFile && (\n                  <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                    <div className=\"flex items-center space-x-2\">\n                      <FileText className=\"w-4 h-4 text-gray-600\" />\n                      <span className=\"text-sm text-gray-900\">{selectedFile.name}</span>\n                      <span className=\"text-xs text-gray-500\">\n                        ({(selectedFile.size / 1024).toFixed(1)} KB)\n                      </span>\n                    </div>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setSelectedFile(null)}\n                      data-testid=\"button-remove-file\"\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                )}\n              </div>\n\n              {/* CSV Format Information */}\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <h4 className=\"text-sm font-medium text-blue-900 mb-2\">CSV Format Requirements</h4>\n                <div className=\"text-xs text-blue-700 space-y-1\">\n                  <p><strong>Required columns:</strong> name, phone</p>\n                  <p><strong>Optional columns:</strong> email, groups</p>\n                  <p><strong>Groups:</strong> Separate multiple groups with commas</p>\n                  <p><strong>Example:</strong> \"John Doe\",\"+1234567890\",\"john@example.com\",\"VIP,Customers\"</p>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleDownloadTemplate}\n                  className=\"mt-3\"\n                  data-testid=\"button-download-template\"\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Download Template\n                </Button>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex justify-end space-x-3\">\n                <Button\n                  variant=\"outline\"\n                  onClick={handleClose}\n                  data-testid=\"button-cancel-import\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleImport}\n                  disabled={!selectedFile || importMutation.isPending}\n                  className=\"bg-purple-500 text-white hover:bg-purple-600\"\n                  data-testid=\"button-start-import\"\n                >\n                  {importMutation.isPending ? \"Importing...\" : \"Import Contacts\"}\n                </Button>\n              </div>\n            </>\n          ) : (\n            /* Import Results */\n            <div className=\"space-y-4\">\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-whatsapp-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <CheckCircle className=\"w-8 h-8 text-whatsapp-600\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900\">Import Complete!</h3>\n              </div>\n\n              <div className=\"bg-gray-50 p-4 rounded-lg space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Successfully imported:</span>\n                  <span className=\"text-sm font-medium text-whatsapp-600\" data-testid=\"text-imported-count\">\n                    {importResult.imported} contacts\n                  </span>\n                </div>\n                \n                {importResult.errors > 0 && (\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Errors encountered:</span>\n                    <span className=\"text-sm font-medium text-red-600\" data-testid=\"text-error-count\">\n                      {importResult.errors} rows\n                    </span>\n                  </div>\n                )}\n              </div>\n\n              {importResult.errorDetails && importResult.errorDetails.length > 0 && (\n                <div className=\"bg-red-50 p-4 rounded-lg\">\n                  <div className=\"flex items-start space-x-2\">\n                    <AlertCircle className=\"w-5 h-5 text-red-600 mt-0.5\" />\n                    <div>\n                      <h4 className=\"text-sm font-medium text-red-900 mb-2\">Error Details</h4>\n                      <div className=\"text-xs text-red-700 space-y-1\">\n                        {importResult.errorDetails.slice(0, 5).map((error: string, index: number) => (\n                          <p key={index}>• {error}</p>\n                        ))}\n                        {importResult.errorDetails.length > 5 && (\n                          <p>... and {importResult.errorDetails.length - 5} more errors</p>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"flex justify-center space-x-3\">\n                <Button\n                  variant=\"outline\"\n                  onClick={handleReset}\n                  data-testid=\"button-import-more\"\n                >\n                  Import More\n                </Button>\n                <Button\n                  onClick={handleClose}\n                  className=\"bg-whatsapp-500 text-white hover:bg-whatsapp-600\"\n                  data-testid=\"button-done-import\"\n                >\n                  Done\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10338},"client/src/components/modals/qr-code-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { X, QrCode, Smartphone, RefreshCw } from \"lucide-react\";\n\ninterface QRCodeModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  session?: any;\n}\n\nexport function QRCodeModal({ isOpen, onClose, session }: QRCodeModalProps) {\n  const [connectionStatus, setConnectionStatus] = useState<string>(\"waiting\");\n\n  const { data: qrData, refetch, isError, error } = useQuery<{ qrCode: string }>({\n    queryKey: [`/api/sessions/${session?.id}/qr`],\n    enabled: isOpen && !!session?.id,\n    refetchInterval: 5000, // Refetch every 5 seconds\n    retry: 3,\n  });\n\n  useEffect(() => {\n    if (session?.status) {\n      setConnectionStatus(session.status);\n    }\n  }, [session?.status]);\n\n  const handleRefresh = () => {\n    refetch();\n  };\n\n  const getStatusMessage = () => {\n    switch (connectionStatus) {\n      case 'connected':\n        return {\n          title: \"Successfully Connected!\",\n          message: \"Your WhatsApp session is now active and ready to send messages.\",\n          color: \"text-whatsapp-600\"\n        };\n      case 'connecting':\n        return {\n          title: \"Connecting...\",\n          message: \"Please wait while we establish the connection.\",\n          color: \"text-blue-600\"\n        };\n      case 'qr_pending':\n        return {\n          title: \"Scan QR Code\",\n          message: \"Use your phone to scan the QR code below.\",\n          color: \"text-orange-600\"\n        };\n      default:\n        return {\n          title: \"Waiting for QR Code\",\n          message: \"Generating QR code for WhatsApp connection...\",\n          color: \"text-gray-600\"\n        };\n    }\n  };\n\n  const status = getStatusMessage();\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Connect WhatsApp</DialogTitle>\n          <DialogDescription>\n            Scan the QR code with your WhatsApp mobile app to connect your session.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"text-center space-y-6\">\n          {/* QR Code Display */}\n          <div className=\"w-64 h-64 bg-gray-100 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center mx-auto relative\">\n            {isError ? (\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <X className=\"w-8 h-8 text-red-600\" />\n                </div>\n                <p className=\"text-sm text-red-600 font-medium\">Failed to load QR code</p>\n                <p className=\"text-xs text-gray-500 mt-1\">Session may have expired</p>\n              </div>\n            ) : qrData?.qrCode ? (\n              <img \n                src={qrData.qrCode} \n                alt=\"WhatsApp QR Code\" \n                className=\"w-full h-full object-contain rounded-lg\"\n                data-testid=\"img-qr-code\"\n              />\n            ) : connectionStatus === 'connected' ? (\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-whatsapp-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <QrCode className=\"w-8 h-8 text-whatsapp-600\" />\n                </div>\n                <p className=\"text-sm text-whatsapp-600 font-medium\">Connected!</p>\n              </div>\n            ) : (\n              <div className=\"text-center\">\n                <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-whatsapp-500 mx-auto mb-4\"></div>\n                <p className=\"text-sm text-gray-500\">Generating QR Code...</p>\n              </div>\n            )}\n            \n            {/* Refresh button */}\n            {qrData?.qrCode && connectionStatus !== 'connected' && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleRefresh}\n                className=\"absolute top-2 right-2 bg-white shadow-md\"\n                data-testid=\"button-refresh-qr\"\n              >\n                <RefreshCw className=\"w-4 h-4\" />\n              </Button>\n            )}\n          </div>\n\n          {/* Status Message */}\n          <div className=\"space-y-2\">\n            <h3 className={`font-medium ${status.color}`} data-testid=\"text-connection-status\">\n              {status.title}\n            </h3>\n            <p className=\"text-sm text-gray-600\">{status.message}</p>\n          </div>\n\n          {/* Instructions */}\n          {connectionStatus !== 'connected' && (\n            <div className=\"bg-gray-50 p-4 rounded-lg text-left\">\n              <h4 className=\"text-sm font-medium text-gray-900 mb-2 flex items-center\">\n                <Smartphone className=\"w-4 h-4 mr-2\" />\n                How to connect:\n              </h4>\n              <ol className=\"text-xs text-gray-600 space-y-1 list-decimal list-inside\">\n                <li>Open WhatsApp on your phone</li>\n                <li>Go to Settings → Linked Devices</li>\n                <li>Tap \"Link a Device\"</li>\n                <li>Scan this QR code with your camera</li>\n              </ol>\n            </div>\n          )}\n\n          {/* Connection Status Indicator */}\n          <div className=\"flex items-center justify-center space-x-2\">\n            <div className={`w-3 h-3 rounded-full ${\n              connectionStatus === 'connected' ? 'bg-whatsapp-500' :\n              connectionStatus === 'connecting' ? 'bg-blue-500 animate-pulse' :\n              connectionStatus === 'qr_pending' ? 'bg-orange-500 animate-pulse' :\n              'bg-gray-300'\n            }`}></div>\n            <span className=\"text-sm text-gray-600\">\n              {connectionStatus === 'connected' ? 'Connected' :\n               connectionStatus === 'connecting' ? 'Connecting...' :\n               connectionStatus === 'qr_pending' ? 'Waiting for scan...' :\n               'Preparing...'}\n            </span>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-center space-x-3\">\n            {connectionStatus === 'connected' ? (\n              <Button\n                onClick={onClose}\n                className=\"bg-whatsapp-500 text-white hover:bg-whatsapp-600\"\n                data-testid=\"button-close-connected\"\n              >\n                Done\n              </Button>\n            ) : (\n              <>\n                <Button variant=\"outline\" onClick={onClose} data-testid=\"button-close-qr\">\n                  Cancel\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={handleRefresh}\n                  data-testid=\"button-refresh-connection\"\n                >\n                  <RefreshCw className=\"w-4 h-4 mr-2\" />\n                  Refresh\n                </Button>\n              </>\n            )}\n          </div>\n\n          {/* Additional Help */}\n          {connectionStatus === 'qr_pending' && (\n            <div className=\"text-xs text-gray-500\">\n              <p>QR code not working?</p>\n              <p>Make sure your phone and computer are connected to the internet.</p>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7431},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}